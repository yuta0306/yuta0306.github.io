{"pageProps":{"TaggedPostData":[{"contentHtml":"<p>Pythonでクラスのインスタンスを生成して格納した変数を出力すると、class名とメモリ番地みたいなやつが出力されてしまいます。Pythonユーザーで機械学習とかで遊んでいる方はわかると思いますが、<em>numpy</em>はnp.ndarrayというクラスを持ちながら出力では行列が出力されます。線形代数計算ライブラリを自作している際、そのような特殊な出力にしたいことがありました。実際に行った方法をお話しします。</p>\n<p>正直タイトルにあるように、出落ちなのですが......</p>\n<p>*__str__*というPython独自の特殊メソッドを用いて、やりたいことを実現していきたいと思います。</p>\n<h2>やりたいこと</h2>\n<p>まずは、実際にやりたいことを明確にしていきます。<em>numpy</em>のような物を参考にしますが、今回は簡単のため、<em>Scalar</em>クラスを作ります。</p>\n<p>このクラスは、数値(intもしくはfloat)を受け取って、それを<em>data</em>として格納させます。</p>\n<p>求める最終形はこちらです。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">>>> </span>scalar = Scalar(<span class=\"hljs-number\">5</span>)\n<span class=\"hljs-meta\">>>> </span><span class=\"hljs-built_in\">print</span>(scalar)\nScalar(<span class=\"hljs-number\">5</span>)</code></pre>\n<p>本来であれば、*&#x3C;__main__.Scalar object at 0x7f85f3a00150>*のように表されてしまいますが、*Scalar(5)*というような特殊文字列にします。</p>\n<h2>Scalarクラスを作る</h2>\n<p>さて、これから<em>Scalar</em>クラスを作ります。</p>\n<p>初めは、最低限クラスとして機能するようなコードを書いていきます。</p>\n<p>Scalarクラスの仕様は以下とします。</p>\n<ul>\n<li>インスタンス生成時に<em>int</em>又は<em>float</em>を受け取る</li>\n<li>上の条件以外ならば、TypeErrorを発出</li>\n</ul>\n<p>これらの条件を満たすようにクラスを書いたのが以下になります。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Scalar</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, data</span>):</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(data, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">isinstance</span>(data, <span class=\"hljs-built_in\">float</span>):\n            self.data = data\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">'expect int or float, but {}'</span>, <span class=\"hljs-built_in\">type</span>(data))</code></pre>\n<p>これでメインルーティンを書いていきます。</p>\n<p>以下を試してみます。</p>\n<ul>\n<li>intを入力</li>\n<li>floatを入力</li>\n<li>listを入力</li>\n</ul>\n<p>さて、書きたします。先ほどのクラスを書いたファイルを拡張していきます。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Scalar</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, data</span>):</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(data, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">isinstance</span>(data, <span class=\"hljs-built_in\">float</span>):\n            self.data = data\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">'expect int or float, but {}'</span>, <span class=\"hljs-built_in\">type</span>(data))\n            \n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    scalar = Scalar(<span class=\"hljs-number\">3</span>)\n    <span class=\"hljs-built_in\">print</span>(scalar)\n    scalar = Scalar(<span class=\"hljs-number\">3.0</span>)\n    <span class=\"hljs-built_in\">print</span>(scalar)\n    scalar = Scalar([<span class=\"hljs-number\">3</span>])\n    <span class=\"hljs-built_in\">print</span>(scalar)</code></pre>\n<p>ターミナルで実行してみます。</p>\n<pre><code class=\"hljs language-bash\">$ python scalar.py\n&#x3C;__main__.Scalar object at 0x7fddd4300150>\n&#x3C;__main__.Scalar object at 0x7fddd4300190>\nTraceback (most recent call last):\n  File <span class=\"hljs-string\">\"scalar.py\"</span>, line 13, <span class=\"hljs-keyword\">in</span> &#x3C;module>\n    scalar = Scalar([3])\n  File <span class=\"hljs-string\">\"scalar.py\"</span>, line 6, <span class=\"hljs-keyword\">in</span> __init__\n    raise TypeError(<span class=\"hljs-string\">'expect int or float, but {}'</span>, <span class=\"hljs-built_in\">type</span>(data))\nTypeError: (<span class=\"hljs-string\">'expect int or float, but {}'</span>, class <span class=\"hljs-string\">'list'</span>)</code></pre>\n<p>3と3.0の入力は受け取れましたが、どうやら[3]の入力は期待した通りエラーを出してくれています。</p>\n<p>しかし、やはりこのままではクラスをそのまま出力してしまっています。</p>\n<h2>【<strong>str</strong>】の出番</h2>\n<p>それでは、__str__という特殊メソッドを用いて、出力結果を変更していきます。</p>\n<p>先までのクラスを以下のように変えていきます。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Scalar</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, data</span>):</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(data, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">isinstance</span>(data, <span class=\"hljs-built_in\">float</span>):\n            self.data = data\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">'expect int or float, but {}'</span>, <span class=\"hljs-built_in\">type</span>(data))\n            \n    &#x3C;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">comment</span>\"># 以下を追加\n    <span class=\"hljs-title\">def</span> <span class=\"hljs-title\">__str__</span>(<span class=\"hljs-params\">self</span>):</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'Scalar({})'</span>.<span class=\"hljs-built_in\">format</span>(self.data)</code></pre>\n<p>最後の2行を追加する感じです。</p>\n<p>それでは、<em>int</em>と<em>float</em>以外はエラーを出すことを確認しているのでメインルーティンも同時に変えて以下のファイルとして完成させましょう。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Scalar</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, data</span>):</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(data, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">isinstance</span>(data, <span class=\"hljs-built_in\">float</span>):\n            self.data = data\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">'expect int or float, but {}'</span>, <span class=\"hljs-built_in\">type</span>(data))\n            \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__str__</span>(<span class=\"hljs-params\">self</span>):</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'Scalar({})'</span>.<span class=\"hljs-built_in\">format</span>(self.data)\n        \n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    scalar = Scalar(<span class=\"hljs-number\">3</span>)\n    <span class=\"hljs-built_in\">print</span>(scalar)\n    scalar = Scalar(<span class=\"hljs-number\">3.0</span>)\n    <span class=\"hljs-built_in\">print</span>(scalar)</code></pre>\n<p>この出力結果はどうなるでしょうか......(ドキドキ??)</p>\n<pre><code class=\"hljs language-bash\">$ python scalar.py\nScalar(3)\nScalar(3.0)</code></pre>\n<p>期待した通りの結果ですね!!</p>\n<p>このように、クラスのインスタンスの出力を制御するには**<strong>str</strong>**という特殊メソッドを使うと良いみたいです。</p>\n<p>ただし、<strong>__repr</strong>というものもあります。今回のソースに関しては正直いうと、この**<strong>repr</strong>**の方が適している気がします。(evalを使えば可逆的に戻すことができるため)</p>\n<p>詳しくはこちらを参照されたい(<a href=\"https://docs.python.org/ja/3/reference/datamodel.html\">https://docs.python.org/ja/3/reference/datamodel.html</a>)</p>\n<h2>今回のソースの推奨</h2>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Scalar</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, data</span>):</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(data, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">isinstance</span>(data, <span class=\"hljs-built_in\">float</span>):\n            self.data = data\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">'expect int or float, but {}'</span>, <span class=\"hljs-built_in\">type</span>(data))\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__repr__</span>(<span class=\"hljs-params\">self</span>):</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'Scalar({})'</span>.<span class=\"hljs-built_in\">format</span>(self.data)\n        \n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    scalar = Scalar(<span class=\"hljs-number\">3</span>)\n    <span class=\"hljs-built_in\">print</span>(scalar)\n    scalar = Scalar(<span class=\"hljs-number\">3.0</span>)\n    <span class=\"hljs-built_in\">print</span>(scalar)</code></pre>\n","Title":"classの標準出力を特殊な文字列にしたい【__str__|__repr__】","Date":"2020-10-12","Category":"Python","Tags":["Python","特殊メソッド","オブジェクト指向"],"Authors":"ゆうぼう","Slug":"py-class-repr","Thumbnail":"/images/thumbnails/python.jpg","Description":"Pythonでクラスのインスタンスを生成して格納した変数を出力すると、class名とメモリ番地みたいなやつが出力されてしまいます。Pythonユーザーで機械学習とかで遊んでいる方はわかると思いますが、*numpy*はnp.ndarrayというクラスを持ちながら出力では行列が出力されます。線形代数計算ライブラリを自作している際、そのような特殊な出力にしたいことがありました。実際に行った方法をお話しします。","Published":true}],"tag":"オブジェクト指向","categories":["Web","JavaScript","Competition","Cloud","Linux","Python","ML","Go","SQL"],"tags":["Apache","Appium","atmaCup","AWS","CentOS7","CentOS8","conda","CSS","ffmpeg","Flask","Go","Google Colaboratory","Heroku","HTML","JavaScript","JSON","Kaggle","Linux","Mac","make","map","MeCab","ML","MySQL","NLP","node.js","Pandas","Python","Scikit-learn","Selenium","subprocess","tensorflow","Tkinter","zsh","オブジェクト指向","デコレータ","データ分析","特殊メソッド"],"pages":1,"page":1},"__N_SSG":true}