{"pageProps":{"postData":{"contentHtml":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.15.0/dist/katex.min.css\">\n</head>\n<body>\n<p><strong>GoでHello, world!</strong></p>\n<p>今回はただそれだけをしたいと思いますw</p>\n<h2>チュートリアルによくあるHello, world!</h2>\n<p>hello.goというファイルに書き書きしていきます。</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"fmt\"</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    fmt.Printf(<span class=\"hljs-string\">\"Hello, world!\"</span>)\n}\n</code></pre>\n<p>そしてターミナルから実行します。</p>\n<pre><code class=\"hljs language-bash\">$ go run hello.go\nHello, world!\n</code></pre>\n<p>これがよくある標準出力させるプログラムになります。</p>\n<p>構造は至ってシンプルで、<em>fmt</em>をインポートして、そのメソッドである<em>Printf</em>で出力するという感じです。</p>\n<p>他にも<em>fmt.Println</em>や<em>fmt.Print</em>といった物もあるようですが。</p>\n<h2>ビルトインにprintln</h2>\n<p>ビルトインを漁ってみるとなんだか、<em>println</em>というビルトイン関数を発見!!</p>\n<p>これで試しにハロワしてみました。<br>\nこちらも<em>hello.go</em>に書いていきましょう。</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>  {\n    <span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"Hello, world!\"</span>)\n}\n</code></pre>\n<p>このコードもターミナルから同様に実行していきます。</p>\n<pre><code class=\"hljs language-bash\">$ go run hello.go\nHello, world!\n</code></pre>\n<p>同じような結果が得られました。</p>\n<p><em>fmt.Println</em>をするなら、ビルトイン関数の<em>println</em>で代用できそうですね。</p>\n<p>一応ブートストラッピングとかデバッグに有用性を示せるみたいです。</p>\n<p>簡単にデバッグをするときに、このビルトイン関数を使えば良いでしょう。チュートリアルでもfmtをインポートして使っているので、推奨はfmtなんですかね。</p>\n<p>その辺はもう少し知見をつけてからにしようと思います。</p>\n<p>とりあえずはこれだけでHello, world!はできそうです。</p>\n</body>\n</html>\n","Title":"GoでHello, world!","Date":"2020-10-05","Category":"Go","Tags":"Go","Authors":"ゆうぼう","Slug":"go-hello","Thumbnail":"/images/thumbnails/gopher.jpg","Description":"GoでHello, world!","Published":true},"categories":["論文","Web","JavaScript","Competition","Cloud","Linux","Python","ML","Go","SQL"],"tags":["Apache","Appium","atmaCup","AWS","CentOS7","CentOS8","Colab","COMET","commonsense","conda","Contrasive Learning","CSS","dialogue system","DST","empathetic dialogue system","encyclopedic","ESPNet","ffmpeg","Flask","Gating Mechanism","Go","Google Colaboratory","Heroku","Highway Transformer","HTML","humor detection","Internet-Augmented","JavaScript","JSON","Kaggle","KC-Net","knowledge-base","Knowledge-Intensive NLP","laughter","Linux","Mac","make","map","MeCab","mental health","mental state knowledge","mentalisation","MentalRoBERTa","ML","MT","Multi-Hop Transformer","multi-modal","MySQL","NLI","NLP","Node","node.js","npm","Pandas","persona","PLMKE","Poetry","Prompt-Tuning","Python","Pytorch","pytorch-lightning","Scikit-learn","Selenium","Self-Dependency-Units (SDU)","shared laughter","SISR","subprocess","Super-Resolution","survey","tensorflow","Tkinter","transformer","zsh","オブジェクト指向","デコレータ","データ分析","特殊メソッド","超解像"]},"__N_SSG":true}