{"pageProps":{"postData":{"contentHtml":"<p>Pythonにも<strong>map関数</strong>があり、容易に配列から新たな配列を生み出すことができます。<em>lambda</em>を用いて無名関数を使うなど、いくつか応用方があるので備忘録がてらまとめていこうと思います。</p>\n<p>簡単のため、<em>ある配列の全ての要素の絶対値をとる</em>スクリプトで試します。</p>\n<h2>mapと無名関数</h2>\n<p>新たに配列から配列を作るために忘れてはいけないのは、<strong>mapオブジェクトをlistで囲むこと</strong>です。</p>\n<p>その点を考慮しつつ、新たな配列を生み出していきます。まずは、無名関数<em>lambda</em>を使います。</p>\n<pre><code class=\"hljs language-python\">a = [-<span class=\"hljs-number\">3</span>, -<span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\nto_abs = <span class=\"hljs-keyword\">lambda</span> x: <span class=\"hljs-built_in\">abs</span>(x)\n\nb = <span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">map</span>(to_abs, a))\n<span class=\"hljs-built_in\">print</span>(b)\n</code></pre>\n<pre><code class=\"hljs language-bash\">[3, 2, 1, 0, 1, 2, 3]\n</code></pre>\n<p>無名関数<em>to_abs</em>により、渡される各関数の値の絶対値を返します。</p>\n<h2>mapと普段使いの関数</h2>\n<p>普段通りの関数宣言でも動きます。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title hljs-function\">to_abs</span>(<span class=\"hljs-params\">x</span>):\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">abs</span>(x)\n    \nc = <span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">map</span>(to_abs, a))\n<span class=\"hljs-built_in\">print</span>(c)\n</code></pre>\n<pre><code class=\"hljs language-bash\">[3, 2, 1, 0, 1, 2, 3]\n</code></pre>\n<p>普通に動きますが、ここで注意したいのは<strong>mapに渡す関数に直接的に引数を与えないこと</strong>です。</p>\n<p>そうすることで難なく動きます。</p>\n<p>引数を渡してみるとどうなるでしょうか。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title hljs-function\">to_abs</span>(<span class=\"hljs-params\">x</span>):\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">abs</span>(x)\n    \nc = <span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">map</span>(to_abs(x), a))\n<span class=\"hljs-built_in\">print</span>(c)\n</code></pre>\n<pre><code class=\"hljs language-bash\">Traceback (most recent call last):\n  File <span class=\"hljs-string\">\"map.py\"</span>, line 3, <span class=\"hljs-keyword\">in</span> &#x3C;module>\n    c = list(map(to_abs(x), a))\nNameError: name <span class=\"hljs-string\">'x'</span> is not defined\n</code></pre>\n<p>参照する<em>x</em>がないのでエラーが発生します。その点だけ注意しましょう。</p>\n<h2>mapでsetに応用</h2>\n<p>setについても同様に動作します</p>\n<pre><code class=\"hljs language-python\">d = <span class=\"hljs-built_in\">set</span>(<span class=\"hljs-built_in\">map</span>(to_abs, a))\n<span class=\"hljs-built_in\">print</span>(d)\n</code></pre>\n<pre><code class=\"hljs language-bash\">{0, 1, 2, 3}\n</code></pre>\n<p>しっかりと集合として捉えられていますね。</p>\n<p>mapを使ってさせることはそこまで難しくないですが、処理速度的にはおそらく内包表記の方が速いと思われるので場合に合わせて導入するのが良いかもしれません。</p>\n<p>ただ、numpyやpandasでデータ分析をする際は、map関数がそれぞれで与えられていることもあるので、使えるに越したことはないでしょう。</p>","Title":"【map】を使って新たな配列を作る","Date":"2020-10-26","Category":"Python","Tags":["Python","map"],"Authors":"ゆうぼう","Slug":"py-map","Thumbnail":"/images/thumbnails/python.jpg","Description":"Pythonにもmap関数があり、容易に配列から新たな配列を生み出すことができます。lambdaを用いて無名関数を使うなど、いくつか応用方があるので備忘録がてらまとめていこうと思います。","Published":true},"categories":["Web","JavaScript","Competition","Cloud","Linux","Python","ML","Go","SQL"],"tags":["Apache","Appium","atmaCup","AWS","CentOS7","CentOS8","Colab","conda","CSS","ffmpeg","Flask","Go","Google Colaboratory","Heroku","HTML","JavaScript","JSON","Kaggle","Linux","Mac","make","map","MeCab","ML","MySQL","NLP","node.js","Pandas","Python","Pytorch","pytorch-lightning","Scikit-learn","Selenium","SISR","subprocess","Super-Resolution","tensorflow","Tkinter","zsh","オブジェクト指向","デコレータ","データ分析","特殊メソッド","超解像"]},"__N_SSG":true}