{"pageProps":{"postData":{"contentHtml":"<p>ロジスティック回帰をscikit-learnで実装していると、デフォルトはL2正則化でペナルティを与えています。</p>\n<p>そこで、もっとスパースにしてやろうとL1正則化を行おうとしたのだが、エラーを吐かれた。その時の解決策を共有します。</p>\n<h2>エラーを吐かれた時のバージョン</h2>\n<p>一応最近開発が立て込んでいるので、Anacondaを使って開発環境を分けているのですが、</p>\n<pre><code class=\"hljs language-bash\">(base)$ conda activate ML\n(ML)$ conda list    (pip listでも行ける)\n......\n......\nscikit-learn           0.23.1    \n......</code></pre>\n<p>ということで、scikit-learnのバージョンは<em>0.23.1</em>でした。</p>\n<h2>実装してみる</h2>\n<p>それでは実装してみます。至ってシンプルなスクリプトで動く想定でやっていきます。こちらで変化させるハイパーパラメータは以下になります。</p>\n<table>\n<thead>\n<tr>\n<th>パラメータ</th>\n<th>値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C(正則化のつよさ)</td>\n<td>1(デフォルト)</td>\n</tr>\n<tr>\n<td>penalty</td>\n<td>L1正則化</td>\n</tr>\n<tr>\n<td>max_iter(イテレーションの上限)</td>\n<td>100000</td>\n</tr>\n</tbody>\n</table>\n<p>また、訓練データ(X_train, y_train)とテストデータ(X_test, y_test)に分けてあることにします。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> sklearn.linear_model <span class=\"hljs-keyword\">import</span> LogisticRegression\n\nlr_l1 = LogisticRegression(penalty=<span class=\"hljs-string\">'l1'</span>, max_iter=<span class=\"hljs-number\">100000</span>).fit(X_train, y_train)</code></pre>\n<p>するとこんなエラーが返ってきます。</p>\n<pre><code class=\"hljs language-bash\">~/opt/anaconda3/envs/ML/lib/python3.6/site-packages/sklearn/linear_model/_logistic.py <span class=\"hljs-keyword\">in</span> fit(self, X, y, sample_weight)\n1302         The SAGA solver supports both float64 and float32 bit arrays.\n1303         <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\n-> 1304         solver = _check_solver(self.solver, self.penalty, self.dual)\n1305 \n1306         if not isinstance(self.C, numbers.Number) or self.C &#x3C; 0:\n\n~/opt/anaconda3/envs/ML/lib/python3.6/site-packages/sklearn/linear_model/_logistic.py in _check_solver(solver, penalty, dual)\n441     if solver not in ['liblinear', 'saga'] and penalty not in ('l2', 'none'):\n442         raise ValueError(\"</span>Solver %s supports only <span class=\"hljs-string\">'l2'</span> or <span class=\"hljs-string\">'none'</span> penalties, <span class=\"hljs-string\">\"\n--> 443                          \"</span>got %s penalty.<span class=\"hljs-string\">\" % (solver, penalty))\n444     if solver != 'liblinear' and dual:\n445         raise ValueError(\"</span>Solver %s supports only <span class=\"hljs-string\">\"\n\nValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got l1 penalty.</span></code></pre>\n<p>ファイルのありかは人それぞれですが、エラーは返ってきます。<br>\nデフォルトの<strong>Solverがlbfgs</strong>に変わっていたそうで、l2またはnoneしかペナルティをサポートしていないそうです。</p>\n<p>というわけで、Solverに<strong>liblinear</strong>を指定しないといけないようですね。</p>\n<h2>liblinearを指定する</h2>\n<p>先ほどのエラーをなくすため、新たにパラメータを足します。</p>\n<table>\n<thead>\n<tr>\n<th>パラメータ</th>\n<th>値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C(正則化のつよさ)</td>\n<td>1(デフォルト)</td>\n</tr>\n<tr>\n<td>penalty</td>\n<td>L1正則化</td>\n</tr>\n<tr>\n<td>max_iter(イテレーションの上限)</td>\n<td>100000</td>\n</tr>\n<tr>\n<td>solver</td>\n<td>liblinear</td>\n</tr>\n</tbody>\n</table>\n<p>では足します。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> sklearn.linear_model <span class=\"hljs-keyword\">import</span> LogisticRegression\n\nlr_l1 = LogisticRegression(penalty=<span class=\"hljs-string\">'l1'</span>, solver=<span class=\"hljs-string\">'liblinear'</span>, max_iter=<span class=\"hljs-number\">100000</span>).fit(X_train, y_train)</code></pre>\n<p>これで無事動くようになりました!!!</p>\n<h2>まとめ</h2>\n<p>まとめです。<br>\nscikit-learnを用いて、ロジスティック回帰を使う時、さらにL1正則化をかけたい時は**solver='liblinear'**を引数に追加しましょう。</p>\n<p>この周りは色々と変化が早いので、本を買う際にも初版等も確認しつつ買った方が良い気がしました。バージョン確認も大切に。</p>\n","Title":"ロジスティック回帰でL1正則化を利用できない問題の解決法","Date":"2020-08-01","Category":"Python","Tags":["ML","Python","Scikit-learn"],"Authors":"ゆうぼう","Slug":"logistic-with-l1","Thumbnail":"/images/thumbnails/network.jpg","Description":"ロジスティック回帰をscikit-learnで実装していると、デフォルトはL2正則化でペナルティを与えています。そこで、もっとスパースにしてやろうとL1正則化を行おうとしたのだが、エラーを吐かれた。その時の解決策を共有します。","Published":true},"categories":["Web","JavaScript","Competition","Cloud","Linux","Python","ML","Go","SQL"],"tags":["Apache","Appium","atmaCup","AWS","CentOS7","CentOS8","conda","CSS","ffmpeg","Flask","Go","Google Colaboratory","HTML","JavaScript","JSON","Kaggle","Linux","Mac","make","map","MeCab","ML","MySQL","NLP","node.js","Pandas","Python","Scikit-learn","Selenium","subprocess","tensorflow","Tkinter","zsh","オブジェクト指向","デコレータ","データ分析","特殊メソッド"]},"__N_SSG":true}