{"pageProps":{"postData":{"contentHtml":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.15.0/dist/katex.min.css\">\n</head>\n<body>\n<p><strong>PythonからUNIXコマンドを使いたい</strong>。そんな時があると思います!(多分滅多にないと思うけど)今回は、「ls」コマンドをPythonスクリプトから実行していこうと思います。</p>\n<h2>subpocessモジュールを利用</h2>\n<p>今回の用件を満たすのに必要なのは、「<strong>subprocessモジュール</strong>」になります。Python3.5から*subprocess.run()*というメソッドでサブプロセスをつなげて、コマンドを走らせるという方法が推奨されているみたい...</p>\n<p>os.systemとかos.spawn*の代用だそうですね</p>\n<p>というわけで、<strong>subprocessモジュール</strong>を使用していきます。</p>\n<p>インポートはそのままです。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> subprocess\n</code></pre>\n<h2>subprocess.run()で実際に走らせる</h2>\n<p>それでは早速「ls」コマンドを走らせてみましょう。(実行結果はディレクトリ構造に依存するので、人により異なります)</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> subprocess\n\nres = subprocess.&#x3C;span <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"function\"</span>>run(\n    [<span class=\"hljs-string\">'ls'</span>]\n)\n\n<span class=\"hljs-built_in\">print</span>(res)\n</code></pre>\n<p>この実行結果は以下になります。</p>\n<pre><code class=\"hljs language-bash\">CompletedProcess(args=[<span class=\"hljs-string\">'ls'</span>], returncode=0)\n</code></pre>\n<p>特段注意すべきは、コマンドをリスト又はタプルで入力することでしょうか。基本的にスペースを入れることはできません。引数やフラグを足す際に、スペースが必要ならば、リストやタプルにカンマ(,)で区切りましょう。</p>\n<p>と言いますか...ん？？</p>\n<p>ディレクトリ群出てこないんですけど...<br>\nというのも、あくまで返ってくるのは<strong>subprocess.CompletedProcess</strong>クラスだからですね。</p>\n<h2>CompletedProcessをいじってみる</h2>\n<p>実行出来たはずなのに、結果が帰って来ないようじゃ意味がないので中身を開けていきましょう。</p>\n<p>CompletedProcessクラスには以下のメソッドや変数が存在しています。</p>\n<ul>\n<li>.args</li>\n<li>.returncode</li>\n<li>.stdout</li>\n<li>.check_returncode()</li>\n<li>.stderr</li>\n</ul>\n<p>これから先のチェックは、さきのプログラムの続き。returnされたものは<em>res</em>に入っている。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-built_in\">print</span>(res.args)\n<span class=\"hljs-comment\"># >>> ['ls']</span>\n\n<span class=\"hljs-built_in\">print</span>(res.returncode)\n<span class=\"hljs-comment\"># >>> 0</span>\n\n<span class=\"hljs-built_in\">print</span>(res.stdout)\n<span class=\"hljs-comment\"># >>> None</span>\n\n<span class=\"hljs-built_in\">print</span>(res.stderr)\n<span class=\"hljs-comment\"># >>> None</span>\n</code></pre>\n<p>という結果に...</p>\n<p>プログラムが期待通り終了した場合、0が返ってきます。</p>\n<p>ただ、標準出力、標準エラーには<em>None</em>が返ってきていますね。どこにも結果がないのだけど...</p>\n<h2>実行結果をみる!!</h2>\n<p>実は、subprocess.run()には、出力をキャプチャする引数があったみたいです。それが<strong>capture_output</strong>。これをTrueにすると出力が保存されます。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> subprocess\n\nres = subprocess.&#x3C;span <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"function\"</span>>run([<span class=\"hljs-string\">'ls'</span>], capture_output=<span class=\"hljs-literal\">True</span>)\n\n<span class=\"hljs-built_in\">print</span>(res)\n<span class=\"hljs-comment\"># >>> CompletedProcess(args=['ls'], returncode=0,</span>\nstdout=<span class=\"hljs-string\">b'Applications\\nLibrary\\nSystem\\nUsers\\nVolumes\\nbin\\ncores\\ndev\\netc\\nhome\\nopt\\nprivate\\nsbin\\ntmp\\nusr\\nvar\\n'</span>,\nstderr=<span class=\"hljs-string\">b''</span>)\n</code></pre>\n<p>これで出力をみることができました。</p>\n<p>他にもコマンドを使うことができるので、必要に応じてsubprocessモジュールを使ってみてください。</p>\n<p>今回はこれにて終了！</p>\n</body>\n</html>\n","Title":"PythonからUNIXコマンド発出【ls編】","Date":"2020-11-10","Category":"Python","Tags":["Python","subprocess"],"Authors":"ゆうぼう","Slug":"ls-python","Thumbnail":"/images/thumbnails/python.jpg","Description":"PythonからUNIXコマンドを使いたい。そんな時があると思います!(多分滅多にないと思うけど)今回は、「ls」コマンドをPythonスクリプトから実行していこうと思います。","Published":true},"categories":["論文","Web","JavaScript","Competition","Cloud","Linux","Python","ML","Go","SQL"],"tags":["Apache","Appium","atmaCup","AWS","CentOS7","CentOS8","Colab","conda","CSS","ESPNet","ffmpeg","Flask","Go","Google Colaboratory","Heroku","HTML","JavaScript","JSON","Kaggle","Linux","Mac","make","map","MeCab","ML","MT,transformer,Multi-Hop Transformer","MySQL","NLP","Node","node.js","npm","Pandas","Poetry","Python","Pytorch","pytorch-lightning","Scikit-learn","Selenium","SISR","subprocess","Super-Resolution","tensorflow","Tkinter","zsh","オブジェクト指向","デコレータ","データ分析","特殊メソッド","超解像"]},"__N_SSG":true}