{"pageProps":{"postData":{"contentHtml":"<p>MySQLのデータベースを扱う際に、Pythonスクリプトから接続したくなったので、Pythonからの接続方法を紹介します。</p>\n<h2>mysql-connector-pythonのインストール</h2>\n<p>まずは、mysql-connector-pythonのインストールを行っていきます。(復習がてら)</p>\n<p>今回は、pipを使ってインストールしていきます。</p>\n<pre><code class=\"hljs language-bash\">$~ pip install mysql-connector-python\n</code></pre>\n<p>これでエラーが出ずに進めばインストールできているはずです。とりあえずこれで準備は完了。</p>\n<h2>まずはconnectorをインポート</h2>\n<p>まずは接続するためのメソッドをインポートしないと使えないので、インポートしましょう。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> mysql.connector\n</code></pre>\n<p>これで準備はOK!!</p>\n<h2>接続とDB操作のためのカーソルを生成、そして切断</h2>\n<p>今回の例では、以下の情報を前提にした上で、exampleというデータベースに直で接続していきます。</p>\n<table>\n<thead>\n<tr>\n<th>user</th>\n<th>host</th>\n<th>password</th>\n<th>database</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>root</td>\n<td>127.0.0.1</td>\n<td>example</td>\n<td>example</td>\n</tr>\n</tbody>\n</table>\n<p>さて、早速接続の処理を書いてみましょう。</p>\n<pre><code class=\"hljs language-python\">cnx = mysql.connector.connect(\n    user=<span class=\"hljs-string\">'root'</span>,\n    password=<span class=\"hljs-string\">'example'</span>,\n    database=<span class=\"hljs-string\">'example'</span>,\n)\n</code></pre>\n<p>これだけで接続は完了です。（パスワード等が全て正しければ）<br>\nホストはデフォルトが127.0.0.1なので書かなくていいです。</p>\n<p>この後に、カーソルをあてます。</p>\n<pre><code class=\"hljs language-python\">cur = cnx.cursor()\n</code></pre>\n<p>この処理だけでオッケーです。</p>\n<p>他の処理等も終わったら、しっかり切断しておきましょう。</p>\n<pre><code class=\"hljs language-python\">cur.close()\ncnx.close()\n</code></pre>\n<p>これで接続と切断の処理は完了です。</p>\n<h2>SHOW TABLE表示していく</h2>\n<p>それでは、ここまでで準備は整ったので、*cur = cnx.cursor()*のすぐ後に以下の処理を書いてみましょう。</p>\n<pre><code class=\"hljs language-python\">sql = <span class=\"hljs-string\">\"SHOW TABLES\"</span>    <span class=\"hljs-comment\">#命令文</span>\n<span class=\"hljs-built_in\">print</span>(cur.execute(sql))    <span class=\"hljs-comment\">#結果の出力</span>\n\n<span class=\"hljs-comment\"># --> None    #あれ？？ない</span>\n</code></pre>\n<p>見事失敗ですね(笑)</p>\n<p>僕はずっと、実行した結果が戻り値として吐き出されていると思ってこの処理を書きました。しかし、それがないので<em>None</em>が返ってきてしまうのですね...</p>\n<p>それでは正しいスクリプトを書いていきましょう。</p>\n<pre><code class=\"hljs language-python\">sql = <span class=\"hljs-string\">\"SHOW TABLES\"</span>    <span class=\"hljs-comment\">#命令文</span>\ncur.execute(sql)    <span class=\"hljs-comment\">#実行</span>\n<span class=\"hljs-built_in\">print</span>(cur.fetchone())    <span class=\"hljs-comment\">#1つだけフェッチする</span>\n\n<span class=\"hljs-comment\"># --> (example, )</span>\n</code></pre>\n<p>出力本体は人の環境によって異なりますが、このような感じでタプル型でテーブル名が出力されます。</p>\n<p>複数処理結果をまとめて吐き出すには「<strong>fetchall()</strong>」というものがあるようです。今回は一つだけテーブルに対して情報を吐いてもらうので「<strong>fetchone()</strong>」で取得しました。</p>\n<h2>せっかくなので'SHOW DATABASES'もやってみる</h2>\n<p>せっかくなので「<strong>SHOW DATABASES</strong>」も出力してみましょう。DATABASE群をみるので、今回接続する際は先ほどのdatabase引数はなくします。</p>\n<table>\n<thead>\n<tr>\n<th>user</th>\n<th>host</th>\n<th>password</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>root</td>\n<td>127.0.0.1</td>\n<td>example</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> mysql.connector\n\ncnx = mysql.connector.connect(\n    user=<span class=\"hljs-string\">'root'</span>,\n    password=<span class=\"hljs-string\">'example'</span>,\n    )\n\ncur = cnx.cursor()\n\ncur.execute(<span class=\"hljs-string\">\"SHOW DATABASES\"</span>)\n<span class=\"hljs-built_in\">print</span>(cur.fetchall())    <span class=\"hljs-comment\">#&#x3C;&#x3C; fetchall()に注意</span>\n\ncur.close()\ncnx.close()\n\n<span class=\"hljs-comment\"># --> [(example, ), (sys, )]</span>\n</code></pre>\n<p>今回は複数のデータがあることに留意したとして、**fetchall()**しました。ここも見落としポイントが多い気がします。</p>\n<p>僕はそうだったのですが、タプル型に全ての名前が入ると期待したのですが、実際は一つ一つの名前に対してタプルを作り、そのタプル群をリストに入れるようです。</p>\n<h2>まとめ</h2>\n<p>ここまでみてきた結果、一番安全なのはこれでしょうか。</p>\n<pre><code class=\"hljs language-python\">cur = cnx.cursor()\n\ncur.execute(<span class=\"hljs-string\">\"SHOW DATABASES\"</span>)\n<span class=\"hljs-built_in\">print</span>(cur.fetchall()) \n</code></pre>\n<p>まずはカーソルを当ててから、そこでコマンドを実行する。そのあとは「<strong>fetchall()</strong>」でリストに包める。</p>\n<p>情報が1つしかないことがわかっているならば問題ないのですが、基本的には複数あるという想定のもと、fetchall()で取得する方がいい気もしました。</p>","Title":"mysql-connector-pythonで'SHOW ~~~'に困ったのでその対処法","Date":"2020-07-14","Category":"Python","Tags":["MySQL","Python"],"Authors":"ゆうぼう","Slug":"show_tables-mysql-python","Thumbnail":"/images/thumbnails/database.jpg","Description":"Pythonのライブラリ「mysql-connector-python」を使っていたのですが、なかなか'SHOW TABLES'や'SHOW DATABASES'を出力できなかったので、その対処法を備忘録としてまとめます。","Published":true},"categories":["論文","Web","JavaScript","Competition","Cloud","Python","Linux","ML","Go","SQL"],"tags":["Apache","Appium","ASR","atmaCup","AWS","brew","CentOS7","CentOS8","Colab","COMET","commonsense","conda","Contrasive Learning","Contrastive Learning","CSS","Demo","Dialogue Structure Learning","dialogue system","DST","Emotion Recognition","empathetic dialogue system","encyclopedic","Error Correction","ESPNet","ffmpeg","Flask","Gating Mechanism","Go","Google Colaboratory","Heroku","Highway Transformer","HTML","humor detection","Intent Classification","Internet-Augmented","JavaScript","JSON","Kaggle","KC-Net","knowledge-base","Knowledge-Intensive NLP","laughter","Linux","LLM","Mac","make","map","MeCab","mental health","mental state knowledge","mentalisation","MentalRoBERTa","Merging Models","ML","Model Editing","Model Patching","MT","Multi-Hop Transformer","multi-modal","MySQL","NLG","NLI","NLP","Node","node.js","npm","Overleaf","Pandas","persona","PLMKE","Poetry","Prompt-Tuning","Python","Pytorch","pytorch-lightning","Scikit-learn","Selenium","Self-Dependency-Units (SDU)","shared laughter","SISR","SLU","Speech Disfluency","subprocess","Super-Resolution","survey","tensorflow","Tkinter","Transfer Learning","transformer","Weight Interpolation","zsh","オブジェクト指向","デコレータ","データ分析","特殊メソッド","聞き手反応","論文執筆","超解像"]},"__N_SSG":true}