{"pageProps":{"postData":{"contentHtml":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.15.0/dist/katex.min.css\">\n</head>\n<body>\n<p>Goは静的型付言語でありながら、どうやら型を推論できるらしいですね。公式チュートリアルをみて知りましたが。ここでいくつか型を試してみたので、その実験結果を報告していきます。</p>\n<h2>静的型付らしい変数宣言</h2>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">var</span> i, j <span class=\"hljs-type\">int</span> = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>\n</code></pre>\n<p>よくやる印象を持つのはこれですかね。(Cの方がGoより馴染んでいる状態だからかもしれないけど)</p>\n<p>とりあえず、<em>var variable type</em>で型宣言ができるという仕様なわけですね。</p>\n<h2>型推論(Goチュートリアルより)</h2>\n<p>Goのチュートリアルの中に「<a href=\"https://tour.golang.org/basics/14\">型推論(type inferece)</a>」というセクションがありました。そこからコードを引用させていただきます。</p>\n<p>そこで紹介されていたコードがこちらです。</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"fmt\"</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tv := <span class=\"hljs-number\">42</span> <span class=\"hljs-comment\">// change me!</span>\n\tfmt.Printf(<span class=\"hljs-string\">\"v is of type %T\\n\"</span>, v)\n}\n\n</code></pre>\n<p>これで得られる結果がこちらです。</p>\n<pre><code class=\"hljs language-bash\">v is of <span class=\"hljs-built_in\">type</span> int\n</code></pre>\n<p>型宣言は明示的には行っていませんが、int型であることを推論し認識したようです。</p>\n<p>それでは、次のセクションでは他に推論できた型を紹介していきます。</p>\n<h2>推論できた型集</h2>\n<p>ソースコードにより紹介していきます。</p>\n<p>コード自体は先ほどの公式チュートリアルより引用させていただいたコードが元になっています。(Go使いではないので、慣習的によくない表現があれば教えていただきたいです。)</p>\n<p>コードがこちら。</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"fmt\"</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>  {\n\ti := <span class=\"hljs-number\">3</span>\n\ti32 := <span class=\"hljs-string\">'3'</span>\n\tf := <span class=\"hljs-number\">3.14</span>\n\tj := <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1i</span>\n\tb := <span class=\"hljs-literal\">false</span>\n\ts := <span class=\"hljs-string\">\"string\"</span>\n\tfmt.Printf(<span class=\"hljs-string\">\"i is of type %T\\\\n\"</span>, i)\n\tfmt.Printf(<span class=\"hljs-string\">\"i32 is of type %T\\\\n\"</span>, i32)\n\tfmt.Printf(<span class=\"hljs-string\">\"f is of type %T\\\\n\"</span>, f)\n\tfmt.Printf(<span class=\"hljs-string\">\"j is of type %T\\\\n\"</span>, j)\n\tfmt.Printf(<span class=\"hljs-string\">\"b is of type %T\\\\n\"</span>, b)\n\tfmt.Printf(<span class=\"hljs-string\">\"s is of type %T\\\\n\"</span>, s)\n}\n</code></pre>\n<p>上記のコードより得られる結果がこちらです。</p>\n<pre><code class=\"hljs language-bash\">i is of <span class=\"hljs-built_in\">type</span> int\ni32 is of <span class=\"hljs-built_in\">type</span> int32\nf is of <span class=\"hljs-built_in\">type</span> float64\nj is of <span class=\"hljs-built_in\">type</span> complex128\nb is of <span class=\"hljs-built_in\">type</span> bool\ns is of <span class=\"hljs-built_in\">type</span> string\n</code></pre>\n<p>個人的に詰まった？理解に苦しむのは<em>int32</em>ですかね。「''」と「\"\"」が違った意味合いを持つのはPythonユーザからすると少しつまりますね。しかし、経験してしまえば覚えるので大丈夫ですね。</p>\n<p>とりあえず、Go初めて勉強3日間の僕が観測できた型推論はこれらになります。</p>\n<ul>\n<li>int</li>\n<li>int32</li>\n<li>float64</li>\n<li>complex128</li>\n<li>bool</li>\n<li>string</li>\n</ul>\n<p>他にもあったら教えていただきたいです。(Gopherの皆さんよろしくお願いします)</p>\n<p>なかなか使いやすい言語と言った所感なので、これからGoの勉強とこのブログによるアウトプットをゆっくりやって行こうかなと思います。(他の開発が最優先なので)</p>\n<p>今回は「<strong>Goの型の推論</strong>」についてお話ししました〜。それでは。</p>\n<h2>追記</h2>\n<p>uint8(unsigned int8)もできるみたいです。情報提供ありがとうございます。</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>  {\n\tu := []<span class=\"hljs-type\">byte</span>{<span class=\"hljs-string\">'3'</span>}\n\tfmt.Printf(<span class=\"hljs-string\">\"u is of type %T\\\\n\"</span>, u)\n}\n</code></pre>\n<p>出力は以下になります。</p>\n<pre><code class=\"hljs language-bash\">u is of <span class=\"hljs-built_in\">type</span> []uint8\n</code></pre>\n</body>\n</html>\n","Title":"Goはどうやら型を推論できるらしい話","Date":"2020-10-10","Category":"Go","Tags":"Go","Authors":"ゆうぼう","Slug":"go-type-inference","Thumbnail":"/images/thumbnails/gopher.jpg","Description":"Goは静的型付言語でありながら、どうやら型を推論できるらしいですね。公式チュートリアルをみて知りましたが。ここでいくつか型を試してみたので、その実験結果を報告していきます。","Published":true},"categories":["Web","JavaScript","Competition","Cloud","Linux","Python","ML","Go","SQL"],"tags":["Apache","Appium","atmaCup","AWS","CentOS7","CentOS8","Colab","conda","CSS","ffmpeg","Flask","Go","Google Colaboratory","Heroku","HTML","JavaScript","JSON","Kaggle","Linux","Mac","make","map","MeCab","ML","MySQL","NLP","Node","node.js","npm","Pandas","Python","Pytorch","pytorch-lightning","Scikit-learn","Selenium","SISR","subprocess","Super-Resolution","tensorflow","Tkinter","zsh","オブジェクト指向","デコレータ","データ分析","特殊メソッド","超解像"]},"__N_SSG":true}