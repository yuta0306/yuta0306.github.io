{"pageProps":{"postData":{"contentHtml":"<p>ディープラーニングとか、とにかく複雑でメモリを使用するような計算処理が家庭用パソコンでもできる時代になりました。(そーゆー時代しか生きていないんですけど)とはいえ、メモリを意識せずともプログラムをかけているのは最適化されたライブラリを使っているからなわけで。。。そんなわけで自分でもメモリ管理を気をつけたいわけです。そこで、弱参照によって、うまいことPython処理系にメモリの破棄を促す方法をお話ししていきます。</p>\n<h2>Pyton処理系のお話</h2>\n<p>さて、これまでPythonを触ってきた僕ですが、メモリ管理を意識したことはほっとんどなく、大学の授業でC言語を学んだ際、低レイヤーの処理に少し不慣れで難しさを感じました。</p>\n<p>それくらいPython処理系はメモリ管理を強く意識させることはないということなのでしょう。</p>\n<p>それで、Python処理系は基本的には、<strong>オブジェクトが参照される回数をカウント</strong>して、参照するものがなくなった段階でメモリを破棄する。そんなイメージらしい。</p>\n<p>つまり、循環参照のような状態に陥ると、<strong>ユーザからは参照できないにもかかわらず、メモリに残ってしまう</strong>ということが発生するそうです。(他の手法でメモリが消されるのだろうが、こちらの消えて欲しいタイミングで消せることをメモリ管理と今回は考える)</p>\n<h2>メモリが即座に消されるパターン</h2>\n<p>以下が、参照カウント(あるオブジェクトを参照するものの数)によってきれいに即座にメモリが破棄されるパターンです。</p>\n<pre><code><span><span>class</span> <span>object</span>:</span>\n    <span>pass</span>\n    \n<span><span>def</span> <span>func</span>(<span>a</span>):</span>\n    <span>print</span>(a)\n    \na = <span>object</span>()  <span># a: 参照カウント 1</span>\nb = <span>object</span>()  <span># b: 参照カウント 1</span>\nc = <span>object</span>()  <span># c: 参照カウント 1</span>\n\na.b = b  <span># b: 参照カウント 2</span>\nb.c = c  <span># c: 参照カウント 2</span>\n\na = b = c = <span>None</span>  <span># メモリ破棄(a, b, c: 参照カウント 0)&#x3C;/code></span></code></pre>\n<h2>循環参照により即座に破棄されないパターン</h2>\n<p>続いて、循環参照を起こしてみます。これによって、長い間メモリに<strong>ユーザが参照できないオブジェクトが残ってしまいます</strong>。</p>\n<pre><code><span># ライブラリをインポート</span>\n<span>import</span> weakref\n\n<span><span>class</span> <span>object</span>:</span>\n    <span>pass</span>\n    \n<span><span>def</span> <span>func</span>(<span>a</span>):</span>\n    <span>print</span>(a)\n    \na = <span>object</span>()  <span># a: 参照カウント 1</span>\nb = <span>object</span>()  <span># b: 参照カウント 1</span>\nc = <span>object</span>()  <span># c: 参照カウント 1</span>\n\n<span># 以下を弱参照で循環させる</span>\na.b = b  <span># b: 参照カウント 2</span>\nb.c = c  <span># c: 参照カウント 2</span>\nc.a = a  <span># a: 参照カウント 2</span>\n<span># 以下でメモリが破棄されているか参照する</span>\na_ref = weakref.ref(a)\nb_ref = weakref.ref(b)\nc_ref = weakref.ref(c)\n\na = b = c = <span>None</span>  <span># メモリ破棄できない(a, b, c: 参照カウント 1)</span>\n\n<span>print</span>(a_ref, b_ref, c_ref)&#x3C;/code></code></pre>\n<p>出力はこんな感じです</p>\n<pre><code>&#x3C;weakref at 0x7fc5e3a49bf0; to <span>'object'</span> at 0x7fc5e3a40150> &#x3C;weakref at 0x7fc5e3a49c50; to <span>'object'</span> at 0x7fc5e3a40190> &#x3C;weakref at 0x7fc5e3a49cb0; to <span>'object'</span> at 0x7fc5e3a40250></code></pre>\n<p>破棄されていれば<em>dead</em>と書かれるはず...</p>\n<p>やはりダメですね。弱参照で破棄させましょう。</p>\n<h2>weakrefで改良</h2>\n<p>先ほどの問題を、<em>weakref.ref</em>を用いて、弱参照とすることで参照カウントを行わないように設定します。</p>\n<p>そうすることで参照カウントが最終的に0になり、メモリをPython処理系によって即座に破棄されることができます。</p>\n<pre><code><span># ライブラリをインポート</span>\n<span>import</span> weakref\n\n<span><span>class</span> <span>object</span>:</span>\n    <span>pass</span>\n    \n<span><span>def</span> <span>func</span>(<span>a</span>):</span>\n    <span>print</span>(a)\n    \na = <span>object</span>()  <span># a: 参照カウント 1</span>\nb = <span>object</span>()  <span># b: 参照カウント 1</span>\nc = <span>object</span>()  <span># c: 参照カウント 1</span>\n\n<span># 以下を弱参照で循環させる</span>\na.b = weakref.ref(b)  <span># b: 参照カウント 0</span>\nb.c = weakref.ref(c)  <span># c: 参照カウント 0</span>\nc.a = weakref.ref(a)  <span># a: 参照カウント 0</span>\n<span># 以下でメモリが破棄されているか参照</span>\na_ref = weakref.ref(a)\nb_ref = weakref.ref(b)\nc_ref = weakref.ref(c)\n\na = b = c = <span>None</span>  <span># メモリ破棄(a, b, c: 参照カウント 0)</span>\n\n<span>print</span>(a_ref, b_ref, c_ref)&#x3C;/code></code></pre>\n<p>出力がこんな感じ。</p>\n<pre><code>&#x3C;weakref at 0x7f868932dcb0; dead> &#x3C;weakref at 0x7f868932dbf0; dead> &#x3C;weakref at 0x7f868932dc50; dead></code></pre>\n<p>全て<em>dead</em>になっていますね。これで期待した通りのタイミングでメモリを破棄することができました!!!</p>\n<p>時には低いレイヤーまで考えてみるのも楽しいものですね。(時にはです。意識しなくていいことが幸せ)</p>\n","Title":"【weakref】弱い参照によってメモリ管理をする","Date":"2020-10-12","Category":"Python","Tags":"Python","Authors":"ゆうぼう","Slug":"weakref","THUMBNAIL":"python.jpg","Description":"ディープラーニングとか、とにかく複雑でメモリを使用するような計算処理が家庭用パソコンでもできる時代になりました。(そーゆー時代しか生きていないんですけど)とはいえ、メモリを意識せずともプログラムをかけているのは最適化されたライブラリを使っているからなわけで。。。そんなわけで自分でもメモリ管理を気をつけたいわけです。そこで、弱参照によって、うまいことPython処理系にメモリの破棄を促す方法をお話ししていきます。","Published":true},"categories":["Web","JavaScript","Competition","Cloud","Linux","Python","ML","Go","SQL"],"tags":["Apache","Appium","atmaCup","AWS","CentOS7","CentOS8","Colab","conda","CSS","ffmpeg","Flask","Go","Google Colaboratory","Heroku","HTML","JavaScript","JSON","Kaggle","Linux","Mac","make","map","MeCab","ML","MySQL","NLP","node.js","Pandas","Python","Pytorch","pytorch-lightning","Scikit-learn","Selenium","SISR","subprocess","Super-Resolution","tensorflow","Tkinter","zsh","オブジェクト指向","デコレータ","データ分析","特殊メソッド","超解像"]},"__N_SSG":true}