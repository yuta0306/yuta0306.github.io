{"pageProps":{"TaggedPostData":[{"contentHtml":"<h2>MySQLにアクセス</h2>\n<p>最初に、MySQLにアクセスして対話モードを実行していきましょう。</p>\n<pre><code>$~ mysql -u root -p    <span>#root権限で入ってみる</span>\nEnter password: **********\n~~ 以下略 ~~\n\nmysql> </code></pre>\n<p>まずはコレで準備OK</p>\n<h2>テーブルの型のチェックと期待する変更結果の提示</h2>\n<p>さて、ここからカラムを追加していきましょう。元々のテーブル(example_tableと名付ける)は以下を想定します。</p>\n<table>\n<thead>\n<tr>\n<th>user</th>\n<th>age</th>\n<th>height</th>\n<th>weight</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>VARCHAR(32)</td>\n<td>INT</td>\n<td>FLOAT</td>\n<td>FLOAT</td>\n</tr>\n</tbody>\n</table>\n<p>まずは調べてみましょう。</p>\n<pre><code>mysql<span>></span> <span>DESCRIBE</span> example_table;\n<span>+</span><span>-----------+---------------+------+-----+---------+-------+</span>\n<span>|</span> Field     <span>|</span> Type          <span>|</span> <span>Null</span> <span>|</span> Key <span>|</span> <span>Default</span> <span>|</span> Extra <span>|</span>\n<span>+</span><span>-----------+---------------+------+-----+---------+-------+</span>\n<span>|</span> <span>user</span>      <span>|</span> <span>varchar</span>(<span>32</span>)   <span>|</span> YES  <span>|</span>     <span>|</span> <span>NULL</span>    <span>|</span>       <span>|</span>\n<span>|</span> age       <span>|</span> <span>int</span>           <span>|</span> YES  <span>|</span>     <span>|</span> <span>NULL</span>    <span>|</span>       <span>|</span>\n<span>|</span> height    <span>|</span> <span>float</span>         <span>|</span> YES  <span>|</span>     <span>|</span> <span>NULL</span>    <span>|</span>       <span>|</span>\n<span>|</span> weight    <span>|</span> <span>float</span>         <span>|</span> YES  <span>|</span>     <span>|</span> <span>NULL</span>    <span>|</span>       <span>|</span>\n<span>+</span><span>-----------+---------------+------+-----+---------+-------+</span>\n<span>4</span> <span>rows</span> <span>in</span> <span>set</span> (<span>0.00</span> sec)</code></pre>\n<p>そしてここにBMIを定義するカラムを追加してみたいと思います。想定する結果がこちらです。</p>\n<table>\n<thead>\n<tr>\n<th>user</th>\n<th>age</th>\n<th>height</th>\n<th>weight</th>\n<th>bmi</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>VARCHAR(32)</td>\n<td>INT</td>\n<td>FLOAT</td>\n<td>FLOAT</td>\n<td>FLOAT</td>\n</tr>\n</tbody>\n</table>\n<h2>カラムを追加する</h2>\n<p>さて、先ほどの期待結果に合わせてカラムを挿入していきましょう。コマンドの構文としてはこちらになります。</p>\n<p><strong>ALTER TABLE テーブル名 ADD カラム名 型 (オプション);</strong></p>\n<p>それでは実際にコマンドを実行していきましょう。さきの追加によると、</p>\n<table>\n<thead>\n<tr>\n<th>テーブル名</th>\n<th>カラム名</th>\n<th>型</th>\n<th>オプション</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>example_table</td>\n<td>bmi</td>\n<td>FLOAT</td>\n<td>なし</td>\n</tr>\n</tbody>\n</table>\n<p>こちらの情報をもとに構文に当てはめます。</p>\n<pre><code>mysql<span>></span> <span>ALTER</span> <span>TABLE</span> example_table <span>ADD</span> bmi <span>FLOAT</span>;\nQuery OK, <span>0</span> <span>rows</span> affected (<span>0.03</span> sec)\nRecords: <span>0</span>  Duplicates: <span>0</span>  Warnings: <span>0</span></code></pre>\n<p>さて、どう変わったのかみてみましょう。</p>\n<pre><code>mysql<span>></span> <span>DESCRIBE</span> example_table;\n<span>+</span><span>-----------+---------------+------+-----+---------+-------+</span>\n<span>|</span> Field     <span>|</span> Type          <span>|</span> <span>Null</span> <span>|</span> Key <span>|</span> <span>Default</span> <span>|</span> Extra <span>|</span>\n<span>+</span><span>-----------+---------------+------+-----+---------+-------+</span>\n<span>|</span> <span>user</span>      <span>|</span> <span>varchar</span>(<span>32</span>)   <span>|</span> YES  <span>|</span>     <span>|</span> <span>NULL</span>    <span>|</span>       <span>|</span>\n<span>|</span> age       <span>|</span> <span>int</span>           <span>|</span> YES  <span>|</span>     <span>|</span> <span>NULL</span>    <span>|</span>       <span>|</span>\n<span>|</span> height    <span>|</span> <span>float</span>         <span>|</span> YES  <span>|</span>     <span>|</span> <span>NULL</span>    <span>|</span>       <span>|</span>\n<span>|</span> weight    <span>|</span> <span>float</span>         <span>|</span> YES  <span>|</span>     <span>|</span> <span>NULL</span>    <span>|</span>       <span>|</span>\n<span>|</span> bmi       <span>|</span> <span>float</span>         <span>|</span> YES  <span>|</span>     <span>|</span> <span>NULL</span>    <span>|</span>       <span>|</span>\n<span>+</span><span>-----------+---------------+------+-----+---------+-------+</span>\n<span>5</span> <span>rows</span> <span>in</span> <span>set</span> (<span>0.00</span> sec)</code></pre>\n<p>うまくいったようですね。最後の行に期待した通りのカラムが追加されているようです。</p>\n<h2>まとめ</h2>\n<p>構文は以下になります。</p>\n<p><strong>ALTER TABLE テーブル名 ADD カラム名 型 (オプション);</strong></p>\n<p>カラムをいくつか増やしたいときは複数同時に指定してカラムを足すこともできます。\nいつも複数データを扱っているときのように()で括って処理を書きます。</p>\n<p><strong>ALTER TABLE テーブル名 ADD (カラム名 型, カラム名 型, ...);</strong></p>\n<p>このような感じでカラムを追加することができます。必要に応じてNULLを使えなくしたりデフォルト値を決めたりするといいでしょう。\n構文自体はこんな感じでした。技術的に必要になった知識がでたら、また公開していきます。</p>\n","Title":"MySQLで困った!カラム追加したい","Date":"2020-07-21","Category":"SQL","Tags":"MySQL","Authors":"ゆうぼう","Slug":"mysql-add-column","Thumbnail":"/images/thumbnails/database.jpg","Description":"MySQL触ってて、他のコードの変更とか方針の変更に応じてテーブルのカラムを挿入したくなることってあるよね。(自分があった)ので、テーブルにカラムを挿入する方法を共有します。","Published":true},{"contentHtml":"<p>現在conoHa VPSにMySQLの環境を作り外部からアクセスしようとしていました。しかし、ここで問題が...</p>\n<p>リモート接続するためのセットアップってどうやるん？<br>\nしかも何や。記事まねても全然うまくいかないやん...orz</p>\n<p>ってことなのですが、バージョン8にメジャーアップデートにあたり、コマンドの変更があったようなので共有します。</p>\n<p>で、今回はroot権限をどこからでも接続する権限を与えます。</p>\n<h2>sshにてリモートサーバにアクセス</h2>\n<p>まずははじめに、コマンドラインで<strong>ssh</strong>を使ってリモートサーバに入ります。今回はルートとして入ります。</p>\n<pre><code>$~ ssh root@xxx.xxx.x.xxx    <span>#@以降はアドレス</span>\nEnter password: **********\n~~ 以下略 ~~\n\n[root@xxx-xxx-x-xxx]<span># </span></code></pre>\n<p>このようにログイン先の情報とともに表示されます。</p>\n<h2>【本題】権限を与える</h2>\n<p>まずはMySQLを起動しまして、以下のコマンドを打ちます。</p>\n<pre><code>mysql<span>></span> <span>CREATE</span> <span>USER</span> <span>'root'</span>@<span>'%'</span> IDENTIFIED <span>BY</span> <span>'your-password'</span>;\nQuery OK, <span>0</span> <span>rows</span> affected (<span>0.01</span> sec)\n\nmysql<span>></span> <span>GRANT</span> <span>all</span> PRIVILEGES\n        <span>-</span><span>></span> <span>ON</span> <span>*</span>.<span>*</span> <span>TO</span> <span>'root'</span>@<span>'%'</span> \n        <span>-</span><span>></span> <span>WITH</span> <span>GRANT</span> OPTION;</code></pre>\n<p>まずは1つ目のコマンドでユーザーを作ります。(<strong>コレが8.0.x以降の仕様なのでドツボにハマるやつ!!</strong>)</p>\n<p>そして2つ目のコマンドにて、権限を付与してきます。ただ、今回は見易さのため複数行にしましたが、1行でも問題はないです。(大文字小文字もあまり気にしなくて良かったりもする)</p>\n<p>あと、'%'ってんはアクセスするIPアドレスを書くところであって、今回はどこからでもアクセスできる(どのPCからでも)を想定するので**'%'**を指定して全てを許可します。</p>\n<p>あと、***.***の部分はデータベースとテーブルの設定ですが、こちらも全てにアクセスができると想定してこちらにしています。任意のデータベースを許可したければ  '任意の名前'.*とでもすれば良いでしょう。</p>\n<p>一応コレで下準備は完了ってところですかね。</p>\n<p>基本的には問題ないのですが、僕が使ってみたconoHa VPSとかだと、ファイヤウォールの設定が必要なので今回は省略。</p>\n<p>ドツボにハマるのはきっとここなので注意。</p>\n<h2>実際にマイナーバージョンでのコマンド打ってみる</h2>\n<p>実際にマイナーバージョンでのコマンドを実行してみますか。(愚行)<br>\nあと小文字でやってみた。</p>\n<pre><code>mysql<span>></span> <span>grant</span> <span>all</span> privileges <span>on</span> \n        <span>-</span><span>></span> <span>*</span>.<span>*</span> <span>to</span> root@\"%\" identified <span>by</span> <span>'your-password'</span> \n        <span>-</span><span>></span> <span>with</span> <span>grant</span> option;\nERROR <span>1064</span> (<span>42000</span>): You have an error <span>in</span> your <span>SQL</span> syntax; <span>check</span> the manual that corresponds <span>to</span> your MySQL server version <span>for</span> the <span>right</span> syntax <span>to</span> use near <span>'identified by '</span>your<span>-</span>password<span>'\nwith grant option'</span> <span>at</span> line <span>2</span></code></pre>\n<p>まあこうなってわからないよね。SQL構文チェックしようねって言われるわけだけど、記事も少なかったし、ここはドツボにハマりかけるのかなと思います。</p>\n<h2>まとめ</h2>\n<p>ルートとして外部からどこでもどのデータベースのアクセスを許可するには以下のコマンドを打ちましょう。</p>\n<pre><code>mysql<span>></span> <span>CREATE</span> <span>USER</span> <span>'root'</span>@<span>'%'</span> IDENTIFIED <span>BY</span> <span>'your-password'</span>;\nQuery OK, <span>0</span> <span>rows</span> affected (<span>0.01</span> sec)\n\nmysql<span>></span> <span>GRANT</span> <span>all</span> PRIVILEGES\n        <span>-</span><span>></span> <span>ON</span> <span>*</span>.<span>*</span> <span>TO</span> <span>'root'</span>@<span>'%'</span> \n        <span>-</span><span>></span> <span>WITH</span> <span>GRANT</span> OPTION;</code></pre>\n<p>他にも外部サーバの設定のよって動かないことがあるので、それはまた紹介しますが。\n今回はバージョン8.0.xでの変更点に触れました。</p>\n<p>快適なデータベースライフを!!</p>\n","Title":"MySQL8.0.xでリモート接続のセットアップをする!","Date":"2020-07-18","Category":"SQL","Tags":"MySQL","Authors":"ゆうぼう","Slug":"mysql-remote-setup","Thumbnail":"/images/thumbnails/database.jpg","Description":"MySQLでリモート接続のためのセットアップを行いました。現環境はバージョン8.0.19なのですが、前回からのメジャーアップデートにて、コマンドが変わっており大変苦労したので備忘録として。かなりつまずきますので共有します。","Published":true},{"contentHtml":"<p>root権限で何でもかんでも行うのはすごく怖かったので、新たにユーザーを登録していました。しかし、登録したはいいものの削除したくもなるわけです。</p>\n<p>そこで今回は登録されているユーザーを削除する流れを紹介していきます。</p>\n<h2>MySQLにアクセス</h2>\n<p>最初に、MySQLにアクセスして対話モードを実行していきましょう。</p>\n<pre><code>$~ mysql -u root -p    <span>#root権限で入ってみる</span>\nEnter password: **********\n~~ 以下略 ~~\n\nmysql> </code></pre>\n<p>まずはコレで準備OK</p>\n<h2>とりあえずユーザー名とホストを調べる</h2>\n<p>ユーザー名とホスト名を調べましょう。ユーザー名が同じものがいくつかあることもありますので、同時にホストも調べておきます。<br>\n消したいユーザーを念のためみておきます。</p>\n<pre><code>mysql<span>></span> <span>SELECT</span> <span>user</span>, host <span>FROM</span> mysql.user\n<span>+</span><span>------------------+-----------+</span>\n<span>|</span> <span>user</span>             <span>|</span> host      <span>|</span>\n<span>+</span><span>------------------+-----------+</span>\n<span>|</span> usr              <span>|</span> localhost <span>|</span>\n<span>|</span> mysql.infoschema <span>|</span> localhost <span>|</span>\n<span>|</span> mysql.session    <span>|</span> localhost <span>|</span>\n<span>|</span> mysql.sys        <span>|</span> localhost <span>|</span>\n<span>|</span> root             <span>|</span> localhost <span>|</span>\n<span>+</span><span>------------------+-----------+</span>\n<span>5</span> <span>rows</span> <span>in</span> <span>set</span> (<span>0.00</span> sec)</code></pre>\n<p>コレで確認ができましたね。下の4つは基本的に最初から入っているやつだと思います。\n今回は、一番上の<em>usr</em>というユーザーのパーミッションを削除してやろうと思います。</p>\n<h2>ユーザーを削除する</h2>\n<p>実際に削除していきます。コマンドは以下のようになります。</p>\n<pre><code>mysql<span>></span> <span>DROP</span> <span>USER</span> usr<span>@localhost</span>;</code></pre>\n<p>これでとりあえず削除は完了。上では、ユーザー名構文に則って削除しました。<br>\n<strong>ユーザー名</strong>@<strong>ホスト</strong>ということですね。</p>\n<h2>ホストを与えないで削除してみる</h2>\n<p>先ほどは、<strong>ユーザー名</strong>@<strong>ホスト</strong>の形式で削除しましたが、ホスト名を明記しなくても消すことはできます。</p>\n<pre><code>mysql<span>></span> <span>DROP</span> <span>USER</span> usr;</code></pre>\n<p>こんな感じです。こうすると明記する場合でいう「usr@'%'」と同値になります。</p>\n","Title":"MySQLでユーザーの権限を削除する","Date":"2020-07-18","Category":"SQL","Tags":"MySQL","Authors":"ゆうぼう","Slug":"mysql-drop-user","Thumbnail":"/images/thumbnails/database.jpg","Description":"結構初歩的なのだけど、ユーザー権限を削除したくなって構文を覚えたので共有します。","Published":true},{"contentHtml":"<p>MySQLのデータベースを扱う際に、Pythonスクリプトから接続したくなったので、Pythonからの接続方法を紹介します。</p>\n<h2>mysql-connector-pythonのインストール</h2>\n<p>まずは、mysql-connector-pythonのインストールを行っていきます。(復習がてら)</p>\n<p>今回は、pipを使ってインストールしていきます。</p>\n<pre><code>$~ pip install mysql-connector-python</code></pre>\n<p>これでエラーが出ずに進めばインストールできているはずです。とりあえずこれで準備は完了。</p>\n<h2>まずはconnectorをインポート</h2>\n<p>まずは接続するためのメソッドをインポートしないと使えないので、インポートしましょう。</p>\n<pre><code><span>import</span> mysql.connector</code></pre>\n<p>これで準備はOK!!</p>\n<h2>接続とDB操作のためのカーソルを生成、そして切断</h2>\n<p>今回の例では、以下の情報を前提にした上で、exampleというデータベースに直で接続していきます。</p>\n<table>\n<thead>\n<tr>\n<th>user</th>\n<th>host</th>\n<th>password</th>\n<th>database</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>root</td>\n<td>127.0.0.1</td>\n<td>example</td>\n<td>example</td>\n</tr>\n</tbody>\n</table>\n<p>さて、早速接続の処理を書いてみましょう。</p>\n<pre><code>cnx = mysql.connector.connect(\n    user=<span>'root'</span>,\n    password=<span>'example'</span>,\n    database=<span>'example'</span>,\n)</code></pre>\n<p>これだけで接続は完了です。（パスワード等が全て正しければ）<br>\nホストはデフォルトが127.0.0.1なので書かなくていいです。</p>\n<p>この後に、カーソルをあてます。</p>\n<pre><code>cur = cnx.cursor()</code></pre>\n<p>この処理だけでオッケーです。</p>\n<p>他の処理等も終わったら、しっかり切断しておきましょう。</p>\n<pre><code>cur.close()\ncnx.close()</code></pre>\n<p>これで接続と切断の処理は完了です。</p>\n<h2>SHOW TABLE表示していく</h2>\n<p>それでは、ここまでで準備は整ったので、*cur = cnx.cursor()*のすぐ後に以下の処理を書いてみましょう。</p>\n<pre><code>sql = <span>\"SHOW TABLES\"</span>    <span>#命令文</span>\n<span>print</span>(cur.execute(sql))    <span>#結果の出力</span>\n\n<span># --> None    #あれ？？ない</span></code></pre>\n<p>見事失敗ですね(笑)</p>\n<p>僕はずっと、実行した結果が戻り値として吐き出されていると思ってこの処理を書きました。しかし、それがないので<em>None</em>が返ってきてしまうのですね...</p>\n<p>それでは正しいスクリプトを書いていきましょう。</p>\n<pre><code>sql = <span>\"SHOW TABLES\"</span>    <span>#命令文</span>\ncur.execute(sql)    <span>#実行</span>\n<span>print</span>(cur.fetchone())    <span>#1つだけフェッチする</span>\n\n<span># --> (example, )</span></code></pre>\n<p>出力本体は人の環境によって異なりますが、このような感じでタプル型でテーブル名が出力されます。</p>\n<p>複数処理結果をまとめて吐き出すには「<strong>fetchall()</strong>」というものがあるようです。今回は一つだけテーブルに対して情報を吐いてもらうので「<strong>fetchone()</strong>」で取得しました。</p>\n<h2>せっかくなので'SHOW DATABASES'もやってみる</h2>\n<p>せっかくなので「<strong>SHOW DATABASES</strong>」も出力してみましょう。DATABASE群をみるので、今回接続する際は先ほどのdatabase引数はなくします。</p>\n<table>\n<thead>\n<tr>\n<th>user</th>\n<th>host</th>\n<th>password</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>root</td>\n<td>127.0.0.1</td>\n<td>example</td>\n</tr>\n</tbody>\n</table>\n<pre><code><span>import</span> mysql.connector\n\ncnx = mysql.connector.connect(\n    user=<span>'root'</span>,\n    password=<span>'example'</span>,\n    )\n\ncur = cnx.cursor()\n\ncur.execute(<span>\"SHOW DATABASES\"</span>)\n<span>print</span>(cur.fetchall())    <span>#&#x3C;&#x3C; fetchall()に注意</span>\n\ncur.close()\ncnx.close()\n\n<span># --> [(example, ), (sys, )]</span></code></pre>\n<p>今回は複数のデータがあることに留意したとして、**fetchall()**しました。ここも見落としポイントが多い気がします。</p>\n<p>僕はそうだったのですが、タプル型に全ての名前が入ると期待したのですが、実際は一つ一つの名前に対してタプルを作り、そのタプル群をリストに入れるようです。</p>\n<h2>まとめ</h2>\n<p>ここまでみてきた結果、一番安全なのはこれでしょうか。</p>\n<pre><code>cur = cnx.cursor()\n\ncur.execute(<span>\"SHOW DATABASES\"</span>)\n<span>print</span>(cur.fetchall()) </code></pre>\n<p>まずはカーソルを当ててから、そこでコマンドを実行する。そのあとは「<strong>fetchall()</strong>」でリストに包める。</p>\n<p>情報が1つしかないことがわかっているならば問題ないのですが、基本的には複数あるという想定のもと、fetchall()で取得する方がいい気もしました。</p>\n","Title":"mysql-connector-pythonで'SHOW ~~~'に困ったのでその対処法","Date":"2020-07-14","Category":"Python","Tags":["MySQL","Python"],"Authors":"ゆうぼう","Slug":"show_tables-mysql-python","Thumbnail":"/images/thumbnails/database.jpg","Description":"Pythonのライブラリ「mysql-connector-python」を使っていたのですが、なかなか'SHOW TABLES'や'SHOW DATABASES'を出力できなかったので、その対処法を備忘録としてまとめます。","Published":true},{"contentHtml":"<p>MySQLのデータベースを扱う際に、Pythonスクリプトから接続したくなったので、Pythonからの接続方法を紹介します。</p>\n<h2>mysql-connector-pythonのインストール</h2>\n<p>まずは、mysql-connector-pythonのインストールを行っていきます。</p>\n<p>今回は、pipを使ってインストールしていきます。</p>\n<pre><code>$~ pip install mysql-connector-python</code></pre>\n<p>これでエラーが出ずに進めばインストールできているはずです。とりあえずこれで準備は完了。</p>\n<h2>まずはconnectorをインポート</h2>\n<p>まずは接続するためのメソッドをインポートしないと使えないので、インポートしましょう。</p>\n<pre><code><span>import</span> mysql.connector</code></pre>\n<p>これで準備はOK!!</p>\n<h2>接続と切断</h2>\n<p>それではここまで完成できていれば、あとは接続の処理を書くだけです。</p>\n<p>今回の例では、以下の情報を前提にしてみます。</p>\n<table>\n<thead>\n<tr>\n<th>user</th>\n<th>host</th>\n<th>password</th>\n<th>database</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>root</td>\n<td>127.0.0.1</td>\n<td>**********</td>\n<td>example</td>\n</tr>\n</tbody>\n</table>\n<p>さて、早速接続の処理を書いてみましょう。</p>\n<pre><code><span>import</span> mysql.connectorcnx = mysql.connecor.connect(\n        user=<span>'root'</span>,\n        host=<span>'127.0.0.1'</span>,\n        password=<span>'**********'</span>,\n        database=<span>'example'</span>,\n    )</code></pre>\n<p>これだけで接続は完了です。（パスワード等が全て正しければ）</p>\n<p>他の処理等も終わったら、しっかり切断しておきましょう。</p>\n<pre><code>    cnx.close()</code></pre>\n<p>これで接続と切断の処理は完了です。</p>\n<p>また、hostが127.0.0.1であることは、他のポートとぶつかっているために人為的にローカルホストやポート番号を変えていなければ、デフォルトの位置になっているはずなので、以下でも実行可能です。</p>\n<pre><code><span>import</span> mysql.connectorcnx = mysql.connecor.connect(\n        user=<span>'root'</span>,\n        host=<span>'127.0.0.1'</span>,\n        password=<span>'**********'</span>,\n        database=<span>'example'</span>,\n    cnx = mysql.connecor.connect(\n        user=<span>'root'</span>,\n        password=<span>'**********'</span>,\n        database=<span>'example'</span>,\n    )</code></pre>\n<h2>connectの引数の内容を辞書にまとめておく</h2>\n<p>先ほど、引数に入力した情報を辞書にまとめて接続することもできます。\n以下のようなスクリプトになります。</p>\n<pre><code><span>import</span> mysql.connector\n\n    config = {\n        user: <span>'root'</span>,\n        host: <span>'127.0.0.1'</span>,\n        password: <span>'**********'</span>,\n        database: <span>'example'</span>,\n    }\n    cnx = mysql.connector.connect(**config)\n\n    cnx.close()</code></pre>\n<p>configは辞書型なので、「**」でアンパックすることも忘れないようにしましょう。</p>\n<h2>まとめ</h2>\n<p>最終的にまとめると、流れはこんな感じです。</p>\n<h2>#辞書使わない</h2>\n<pre><code><span>import</span> mysql.connector\n\ncnx = mysql.connecor.connect(\n    user=&#x3C;span <span><span>class</span>=\"<span>strings</span>\">'<span>root</span>',\n    <span>host</span>=&#x3C;<span>span</span> <span>class</span>=\"<span>strings</span>\">'127.0.0.1',\n    <span>password</span>=&#x3C;<span>span</span> <span>class</span>=\"<span>strings</span>\">'**********',\n    <span>database</span>=&#x3C;<span>span</span> <span>class</span>=\"<span>strings</span>\">'<span>example</span>',\n)\n\n<span>cnx</span>.<span>close</span>()</span></code></pre>\n<h2>#辞書型</h2>\n<pre><code><span>import</span> mysql.connector\n\nconfig = {\n    user: &#x3C;span <span><span>class</span>=\"<span>strings</span>\">'<span>root</span>',\n    <span>host</span>:</span> &#x3C;span <span><span>class</span>=\"<span>strings</span>\">'127.0.0.1',\n    <span>password</span>:</span> &#x3C;span <span><span>class</span>=\"<span>strings</span>\">'**********',\n    <span>database</span>:</span> &#x3C;span <span><span>class</span>=\"<span>strings</span>\">'<span>example</span>',\n}\n<span>cnx</span> = <span>mysql</span>.<span>connector</span>.<span>connect</span>(<span>**config</span>)\n\n<span>cnx</span>.<span>close</span>()</span></code></pre>\n<p>後ほど、テーブルを実際に作ったり、インサートしたりの方法を紹介しようと思います。</p>\n","Title":"mysql-connector-pythonでローカルDBに接続する","Date":"2020-07-13","Category":"Python","Tags":["MySQL","Python"],"Authors":"ゆうぼう","Slug":"connect-to-mysql-python","Thumbnail":"/images/thumbnails/database.jpg","Description":"Pythonのライブラリ「mysql-connector-python」を使って、ローカルのMySQLデータベースに接続します。","Published":true},{"contentHtml":"<p>MySQLを使い始めたのですが、Pythonのライブラリとのバージョンの制約が厳しいので、バージョンの確認が必要になりました。</p>\n<p>その時の備忘録として、対話モードでバージョンを確認する方法を残します。</p>\n<p>対話モードの開き方から順を追って説明します。</p>\n<h2>MySQLで対話モードを起動</h2>\n<p>まずははじめに、MySQLの対話モードを起動します。(すでに環境が整っていることを前提)</p>\n<p>今回は<strong>ルートユーザーでパスワードを要する</strong>場合を考えます。(自分の設定がそうだからw)</p>\n<pre><code>$~ mysql -uroot -p\nEnter password: **********\n~~ 以下略 ~~\n\nmysql> </code></pre>\n<p>このように「mysql>」というプロンプトの表示とともに起動するはずです。</p>\n<h2>バージョンを確認する</h2>\n<p>ここで実際にバージョンを確認してみます。</p>\n<p>コマンドは「<em>SELECT VERSION()</em>」です。実際に実行すると以下のようになるはずです。(ちなみに環境はMySQL Ver8.0.19を想定)</p>\n<pre><code>mysql<span>></span> <span>SELECT</span> VERSION();\n<span>+</span><span>-----------+</span>\n<span>|</span> VERSION() <span>|</span>\n<span>+</span><span>-----------+</span>\n<span>|</span> <span>8.0</span><span>.19</span>    <span>|</span>\n<span>+</span><span>-----------+</span>\n<span>1</span> <span>row</span> <span>in</span> <span>set</span> (<span>0.01</span> sec)</code></pre>\n<p>このように、1行目にはコマンド、2行目には実際のバージョン、3行目は実行時間が現れます。</p>\n<p>僕は、よく「;」を打ち忘れるのですが、焦らなくても大丈夫。次のように解決が可能です。</p>\n<pre><code>mysql<span>></span> <span>SELECT</span> VERSION()\n    <span>-</span><span>></span> ;\n<span>+</span><span>-----------+</span>\n<span>|</span> VERSION() <span>|</span>\n<span>+</span><span>-----------+</span>\n<span>|</span> <span>8.0</span><span>.19</span>    <span>|</span>\n<span>+</span><span>-----------+</span>\n<span>1</span> <span>row</span> <span>in</span> <span>set</span> (<span>0.01</span> sec)</code></pre>\n<p>「;」がないと、まだ入力が続けられるという意味で、  プロンプトが「->」に変化します。その後、焦らず「;」を打てば問題なしです。</p>\n<h2>対話モードは制約がゆるい？？</h2>\n<p>対話モードにおいては大文字或いは小文字の制約が少しゆるいみたいですね。</p>\n<p>実際以下のコマンドでもバージョン確認ができました。</p>\n<pre><code>mysql<span>></span> <span>SELECT</span> VERsion();\nmysql<span>></span> <span>SELECT</span> version();</code></pre>\n<p>とは言っても、Capslockしてしまえば大文字に固定できますので、見にくさもありますし、大文字と小文字の区別は自分の中でやっておくといいでしょう。</p>\n<h2>まとめ</h2>\n<p>ルートユーザーとして対話モードを起動して、バージョン確認するコマンドはこちらの流れになります。</p>\n<pre><code>$~ mysql -uroot -p\nEnter password: *******</code></pre>\n<p>mysql> SELECT VERSION();\n結果の表示</p>\n<pre><code>\nあとで、ルートユーザー以外でも引数を変えればアクセスできます。  \nのちに紹介しようかなと思います。\n\n</code></pre>\n","Title":"MySQLでバージョンを確認する","Date":"2020-07-12","Category":"SQL","Tags":"MySQL","Authors":"ゆうぼう","Summary":"MySQLの対話モードで使用しているMySQLのバージョンの確認方法です。","Slug":"mysql-version","Thumbnail":"/images/thumbnails/database.jpg","Description":"MySQLを使い始めたのですが、Pythonのライブラリとのバージョンの制約が厳しいので、バージョンの確認が必要になりました。その時の備忘録として、対話モードでバージョンを確認する方法を残します。","Published":true}],"tag":"MySQL","categories":["Web","JavaScript","Competition","Cloud","Linux","Python","ML","Go","SQL"],"tags":["Apache","Appium","atmaCup","AWS","CentOS7","CentOS8","Colab","conda","CSS","ffmpeg","Flask","Go","Google Colaboratory","Heroku","HTML","JavaScript","JSON","Kaggle","Linux","Mac","make","map","MeCab","ML","MySQL","NLP","node.js","Pandas","Python","Pytorch","pytorch-lightning","Scikit-learn","Selenium","SISR","subprocess","Super-Resolution","tensorflow","Tkinter","zsh","オブジェクト指向","デコレータ","データ分析","特殊メソッド","超解像"],"pages":1,"page":1},"__N_SSG":true}