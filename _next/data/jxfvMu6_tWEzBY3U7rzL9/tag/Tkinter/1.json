{"pageProps":{"TaggedPostData":[{"contentHtml":"<p>Pythonからtkinterを使ってGUIを実装していました。Entryを使ってユーザの入力値を受け取ることができますが、デフォルト値の設定の仕方に困ったので、デフォルト値を設定した方法を共有します。</p>\n<h2>まずはEntryを生成</h2>\n<p>とりあえずコピペしたら動くようにします。</p>\n<p>ちなみに今回の僕の環境は以下になります。同じ環境で動かしたい場合は、以下のライブラリを<em>requirements.txt</em>にコピペでもして、インストールしてください。</p>\n<pre><code>altgraph==0.17\ncertifi==2020.6.20\nmacholib==1.14\nmysql-connector-python==8.0.21\nprotobuf==3.13.0\npyinstaller==4.0\npyinstaller-hooks-contrib==2020.9\nsix==1.15.0</code></pre>\n<pre><code>pip install -r  requirements.txt</code></pre>\n<p>上のやつをターミナルで回せばインストールできると思います。</p>\n<p>さて、本題。。。</p>\n<p>まずは、Entryを生成します。今回は、<em>entry.py</em>に書いていきます。</p>\n<p>一番大きなくくりのクラスを<em>App</em>として、このインスタンスをメインルーティンで立てていきます。</p>\n<pre><code><span>import</span> tkinter <span>as</span> tk\n\n<span><span>class</span> <span>App</span>(<span>tk.Tk</span>):</span>\n    <span><span>def</span> <span>__init__</span>(<span>self, *args, **kwargs</span>):</span>\n        <span># 魔法</span>\n        tk.Tk.__init__(self, *args, **kwargs)\n\n        <span># 以下でタイトルとウィンドウサイズを設定</span>\n        self.title(<span>u\"tkinterでEntryにデフォルト値を入れたい\"</span>)\n        self.geometry(<span>\"500x300\"</span>)\n\n        <span># Frameを生成</span>\n        self.frame = tk.Frame()\n        self.frame.pack()\n        <span># Labelを生成</span>\n        label = tk.Label(self.frame, text=<span>'Your name'</span>)\n        label.pack()\n        <span># Entryを生成</span>\n        name = tk.Entry(self.frame)\n        name.pack()\n\n<span>if</span> __name__ == <span>\"__main__\"</span>:\n    app = App()\n    app.mainloop()</code></pre>\n<p>これでとりあえずエントリー(入力受付)が可能になります。ここでUIは一切凝っていないので、下のような状態になると思います。</p>\n<p><img src=\"/images/article/tk-entry-default_1.png\" alt=\"完成画面\"></p>\n<p>この入力受付に対して、「山田太郎」をデフォルト値として設定していきたいと思います。</p>\n<h2>デフォルト値の設定</h2>\n<p>続いて、「山田太郎」をデフォルト値として設定していきます。基盤は先ほどのコードになります。</p>\n<p>先に言うと、*tk.Entry().insert()*メソッドを用いて、エントリーに対して文字列を挿入します。</p>\n<p>それではコードを追加しましょう。</p>\n<pre><code><span>import</span> tkinter <span>as</span> tk\n\n<span><span>class</span> <span>App</span>(<span>tk.Tk</span>):</span>\n    <span><span>def</span> <span>__init__</span>(<span>self, *args, **kwargs</span>):</span>\n        <span># 魔法</span>\n        tk.Tk.__init__(self, *args, **kwargs)\n\n        <span># 以下でタイトルとウィンドウサイズを設定</span>\n        self.title(<span>u\"tkinterでEntryにデフォルト値を入れたい\"</span>)\n        self.geometry(<span>\"500x300\"</span>)\n\n        <span># Frameを生成</span>\n        self.frame = tk.Frame()\n        self.frame.pack()\n        <span># Labelを生成</span>\n        label = tk.Label(self.frame, text=<span>'Your name'</span>)\n        label.pack()\n        <span># Entryを生成</span>\n        name = tk.Entry(self.frame)\n\n        <span>\"\"\"ここにコードを1行追加\"\"\"</span>\n        name.insert(<span>0</span>, <span>\"山田太郎\"</span>)\n        <span>\"\"\"ここにコードを1行追加\"\"\"</span>\n\n        name.pack()\n\n<span>if</span> __name__ == <span>\"__main__\"</span>:\n    app = App()\n    app.mainloop()</code></pre>\n<p>概要は上記のようになります。</p>\n<p>後半部分に1行足しただけです。足したのはこれ。</p>\n<p><strong>name.insert(0, \"山田太郎\")</strong></p>\n<p>第一引数はインデックスを指していて、今回はエントリーの一番初めに挿入したいので、<em>0</em>を入れました。</p>\n<p>第二引数は実際に挿入したい値です。よって、今回は「<em>山田太郎</em>」を書きました。</p>\n<p>こうすることで結果は以下が得られると思います。</p>\n<p><img src=\"/images/article/tk-entry-default_2.png\" alt=\"挿入後完成画面\"></p>\n<p>これでデフォルト値の設定ができました。</p>\n<p>正攻法なのかは定かではないですが......www</p>\n<p>これでデフォルト値の設定ができました。必要な時は是非ご活用を。</p>\n","Title":"【Python】tkinterでEntryにデフォルト値を入れたい","Date":"2020-10-07","Category":"Python","Tags":["Python","Tkinter"],"Authors":"ゆうぼう","Slug":"tk-entry-default","Thumbnail":"/images/thumbnails/python.jpg","Description":"Pythonからtkinterを使ってGUIを実装していました。Entryを使ってユーザの入力値を受け取ることができますが、デフォルト値の設定の仕方に困ったので、デフォルト値を設定した方法を共有します。","Published":true}],"tag":"Tkinter","categories":["Web","JavaScript","Competition","Cloud","Linux","Python","ML","Go","SQL"],"tags":["Apache","Appium","atmaCup","AWS","CentOS7","CentOS8","Colab","conda","CSS","ffmpeg","Flask","Go","Google Colaboratory","Heroku","HTML","JavaScript","JSON","Kaggle","Linux","Mac","make","map","MeCab","ML","MySQL","NLP","node.js","Pandas","Python","Pytorch","pytorch-lightning","Scikit-learn","Selenium","SISR","subprocess","Super-Resolution","tensorflow","Tkinter","zsh","オブジェクト指向","デコレータ","データ分析","特殊メソッド","超解像"],"pages":1,"page":1},"__N_SSG":true}