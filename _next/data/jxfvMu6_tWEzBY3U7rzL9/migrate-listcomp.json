{"pageProps":{"postData":{"contentHtml":"<p>Pythonで他にはない特殊な書き方といえば、<strong>内包表記</strong>ですかね。Haskellでもかけるみたいな話聞いたことあるけど。実際内包表記は読みやすく、たいてい高速に動くので推奨される書き方と思います。ベンチマークを測ってみたので参考になればと。</p>\n<h2>今回のコード</h2>\n<p>今回速さを測るための指標となるコードは以下になります。</p>\n<p>至ってシンプルなforループが以下です。</p>\n<pre><code>symbols = <span>'$¢£¥€¤'</span>\n<span><span>def</span> <span>non_ascii</span>(<span>c</span>):</span>\n    <span>return</span> c > <span>127</span>\ncodes = []\n<span>for</span> s <span>in</span> symbols:\n    <span>if</span> <span>ord</span>(s) > <span>127</span>:\n        codes.append(<span>ord</span>(s))</code></pre>\n<p>これを下に複数の書き方に対して処理速度を測ります。</p>\n<h2>いざ実験</h2>\n<p>今回試すものが以下になります。</p>\n<ol>\n<li>ただのforループ</li>\n<li>内包表記</li>\n<li>内包表記 + 自作関数(non_adcii)</li>\n<li>filter + lambda</li>\n<li>filter + 自作関数(non_ascii)</li>\n</ol>\n<p>これらに関して測ってみます。\nコードが以下になります。</p>\n<pre><code><span>import</span> timeit\nTIMES = <span>10000</span>\nSETUP = <span>\"\"\"\nsymbols = '$¢£¥€¤'\ndef non_ascii(c):\n    return c > 127\n\"\"\"</span>\n<span><span>def</span> <span>clock</span>(<span>label, cmd</span>):</span>\n    res = timeit.repeat(cmd, setup=SETUP, number=TIMES)\n    <span>print</span>(label, *(<span>'{:.3f}'</span>.<span>format</span>(x) <span>for</span> x <span>in</span> res))\n<span>if</span> __name__ == <span>\"__main__\"</span>:\n    clock(<span>'for-loop        :'</span>, <span>'codes = []\\nfor s in symbols:\\n\\tif ord(s) > 127: codes.append(ord(s))\\ncodes'</span>)\n    clock(<span>'listcomp        :'</span>, <span>'[ord(s) for s in symbols if ord(s) > 127]'</span>)\n    clock(<span>'listcomp + func :'</span>, <span>'[ord(s) for s in symbols if non_ascii(ord(s))]'</span>)\n    clock(<span>'filter + lambda :'</span>, <span>'list(filter(lambda c: c > 127, map(ord, symbols)))'</span>)\n    clock(<span>'filter + func   :'</span>, <span>'list(filter(non_ascii, map(ord, symbols)))'</span>)</code></pre>\n<p>これらから得られる結果がこんな感じです。(人による)</p>\n<pre><code>for-loop        : 0.009 0.009 0.009 0.009 0.009\nlistcomp        : 0.008 0.008 0.008 0.008 0.008\nlistcomp + func : 0.012 0.013 0.013 0.012 0.012\nfilter + lambda : 0.011 0.013 0.012 0.011 0.013\nfilter + func   : 0.014 0.014 0.014 0.014 0.013</code></pre>\n<p>これはまだループも小さいので差はありませんが、安定して早く動いているのは<strong>内包表記</strong>ですね。</p>\n<p>読みやすく、高速に動くことが多い内包表記でした。実際に導入してみてはいかがでしょか。</p>\n<p>今回は実験だけ示して終わります〜〜.</p>\n","Title":"内包表記でパフォーマンスをあげるのだ！","Date":"2020-11-22","Category":"Python","Tags":["Python"],"Author":"ゆうぼう","Slug":"migrate-listcomp","Thumbnail":"/images/thumbnails/python.jpg","Description":"Pythonで他にはない特殊な書き方といえば、内包表記ですかね。Haskellでもかけるみたいな話聞いたことあるけど。実際内包表記は読みやすく、たいてい高速に動くので推奨される書き方と思います。ベンチマークを測ってみたので参考になればと。","Published":true},"categories":["Web","JavaScript","Competition","Cloud","Linux","Python","ML","Go","SQL"],"tags":["Apache","Appium","atmaCup","AWS","CentOS7","CentOS8","Colab","conda","CSS","ffmpeg","Flask","Go","Google Colaboratory","Heroku","HTML","JavaScript","JSON","Kaggle","Linux","Mac","make","map","MeCab","ML","MySQL","NLP","node.js","Pandas","Python","Pytorch","pytorch-lightning","Scikit-learn","Selenium","SISR","subprocess","Super-Resolution","tensorflow","Tkinter","zsh","オブジェクト指向","デコレータ","データ分析","特殊メソッド","超解像"]},"__N_SSG":true}