{"pageProps":{"postData":{"contentHtml":"<p>FlaskからJSONを返してAPIサーバー風に稼働させていたのですが、なぜかfetchしたJavaScript側でエラーが...なんだこれとなったのですが、バックエンドのPython側のミスでした。何気に気付きにくかったりするので、またミスしたときのために備忘録として残しておきます。</p>\n<p>今回の環境がこちら</p>\n<ul>\n<li>Python-3.8.6</li>\n<li>Flask</li>\n</ul>\n<h2>エラー内容</h2>\n<p>今回起きたエラーがこちらです。</p>\n<pre><code class=\"hljs language-bash\">SyntaxError: Unexpected token o <span class=\"hljs-keyword\">in</span> JSON at position 1\n</code></pre>\n<p>予期せぬトークンが頭文字にあったらしいです。なんだこれ...<br>\n他の場所では特にエラーなかったのになぜここだけ...</p>\n<p>Pythonの方を確認してみます。</p>\n<h2>Pythonのミス</h2>\n<p>単にPythonのミスでした。ミスの部分だけピックアップします。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">'/test'</span></span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test</span>():\n    obj = {\n        <span class=\"hljs-string\">'foo'</span>: <span class=\"hljs-string\">'bar'</span>,\n    }\n    \n    <span class=\"hljs-keyword\">return</span> jsonify(obj)\n</code></pre>\n<p>何気にわかりにくいんです。</p>\n<p><strong>json.dumps()してなかった</strong>......</p>\n<p>めっちゃくだらないミスで萎えますねこれ。</p>\n<p>というわけで、<em>return jsonify</em>する前にしっかりdictをjsonにダンプしておきます。</p>\n<p>改良版が以下。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">'/test'</span></span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test</span>():\n    obj = {\n        <span class=\"hljs-string\">'foo'</span>: <span class=\"hljs-string\">'bar'</span>,\n    }\n    \n    obj = json.dumps(obj)\n    \n    <span class=\"hljs-keyword\">return</span> jsonify(obj) \n</code></pre>\n<p>これでもう、フロント側ではエラー起こさせません!!!!</p>\n<p>簡単に直るけど、気付きにくいってやつです。Flask使ってJSONで通信するときは、フロント側でエラーが出たら、JSONを送っているバックエンドも確認すると良いでしょう。</p>\n<p>今回はこれだけです!</p>","Title":"【Flask】フロントでUnexpected token!?","Date":"2020-11-08","Category":"Python","Tags":["Python","JSON","Flask"],"Authors":"ゆうぼう","Slug":"flask-json-parse-err","Thumbnail":"/images/thumbnails/python.jpg","Description":"FlaskからJSONを返してAPIサーバー風に稼働させていたのですが、なぜかfetchしたJavaScript側でエラーが...なんだこれとなったのですが、バックエンドのPython側のミスでした。何気に気付きにくかったりするので、またミスしたときのために備忘録として残しておきます。","Published":true},"categories":["論文","Web","JavaScript","Competition","Cloud","Python","Linux","ML","Go","SQL"],"tags":["Apache","Appium","ASR","atmaCup","AWS","brew","CentOS7","CentOS8","Colab","COMET","commonsense","conda","Contrasive Learning","Contrastive Learning","CSS","Demo","Dialogue Structure Learning","dialogue system","DST","Emotion Recognition","empathetic dialogue system","encyclopedic","Error Correction","ESPNet","ffmpeg","Flask","Gating Mechanism","Go","Google Colaboratory","Heroku","Highway Transformer","HTML","humor detection","Intent Classification","Internet-Augmented","JavaScript","JSON","Kaggle","KC-Net","knowledge-base","Knowledge-Intensive NLP","laughter","Linux","LLM","Mac","make","map","MeCab","mental health","mental state knowledge","mentalisation","MentalRoBERTa","Merging Models","ML","Model Editing","Model Patching","MT","Multi-Hop Transformer","multi-modal","MySQL","NLG","NLI","NLP","Node","node.js","npm","Overleaf","Pandas","persona","PLMKE","Poetry","Prompt-Tuning","Python","Pytorch","pytorch-lightning","Scikit-learn","Selenium","Self-Dependency-Units (SDU)","shared laughter","SISR","SLU","Speech Disfluency","subprocess","Super-Resolution","survey","tensorflow","Tkinter","Transfer Learning","transformer","Weight Interpolation","zsh","オブジェクト指向","デコレータ","データ分析","特殊メソッド","聞き手反応","論文執筆","超解像"]},"__N_SSG":true}