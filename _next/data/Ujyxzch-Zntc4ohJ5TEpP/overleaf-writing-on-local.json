{"pageProps":{"postData":{"contentHtml":"<p>無料のOverleaf環境ではGitHub連携ができないなぁと思い、ローカルに紐づけて執筆して、執筆のバージョン管理を行いたいぁと思っていたら、しゅんけーさん（<a href=\"https://twitter.com/shunk031\">@shunk031</a>）の次のポストを発見！</p>\n<p>なんだかこれは良さそうな雰囲気！！</p>\n<p>と言うわけで、今回はOverleaf + VSCode + GitHubを連携させて、+αを使った環境の構築を試みます．（本編でのαはGrammarly）</p>\n<h2>環境</h2>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">バージョン</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">PC</td>\n<td align=\"center\">Macbook Pro M2</td>\n</tr>\n<tr>\n<td align=\"center\">OS</td>\n<td align=\"center\">macOS Sonoma</td>\n</tr>\n<tr>\n<td align=\"center\">VSCode</td>\n<td align=\"center\">1.84.2</td>\n</tr>\n</tbody>\n</table>\n<h2>環境構築</h2>\n<p>以下の手順で構築していきます．</p>\n<ol>\n<li><a href=\"https://github.com/iamhyc/Overleaf-Workshop\">Overleaf-Workshop</a>の拡張機能をVScodeに入れる</li>\n<li><a href=\"https://github.com/James-Yu/LaTeX-Workshop\">Latex-Workshop</a>の拡張機能をVSCodeに入れる</li>\n<li>Latex-Workshopの設定を変更</li>\n<li><a href=\"https://formulae.brew.sh/formula/texlive\">texlive</a>をインストール</li>\n<li>+α <a href=\"https://github.com/znck/grammarly\">Grammarly</a>の拡張機能をVSCodeに入れる</li>\n<li>Grammarlyの設定を変更</li>\n</ol>\n<p>1, 3, 5はVSCodeの拡張機能で検索すれば一瞬で出てくるのでスキップ．</p>\n<h3>Latex-Workshopの設定を変更</h3>\n<p>Latex-Workshopの設定を変更します．以下を設定から変えましょう．<code>cmd+,</code>で設定のタブが開けると思います．</p>\n<pre><code class=\"hljs language-diff\">Latex-workshop › Latex › Recipe: Default\n<span class=\"hljs-deletion\">- first</span>\n<span class=\"hljs-addition\">+ lastUsed</span>\n</code></pre>\n<p>onSaveでtexソースをビルドするときに、デフォルト設定の<code>first</code>のままだとpdflatexのビルドが走ってしまいます．\n日本語で書く場合や、日本語が含まれる場合はLuaTexを使っている人が多いと思いますが（？）、そうなるとマウスぽちぽちでLuaTex用のビルドを走らせるのがだるいです．</p>\n<p>そのため、最後に使用したビルドの設定を反映させるためlastUsedにしておくと楽だと思います．</p>\n<h3>texliveをインストール</h3>\n<p>これも説明するまでもないです．<code>brew</code>で簡単にインストールできるので、以下を叩きましょう．ちなみに<code>texlive</code>が嫌な人はこちらが代替になりそうです[<a href=\"https://github.com/James-Yu/LaTeX-Workshop/wiki/Install#requirements\">wiki</a>]．</p>\n<pre><code class=\"hljs language-bash\">$ brew install texlive\n</code></pre>\n<p>結構重いし、依存関係も割と多いので時間がかかりますが、待ちましょう．</p>\n<h3>Grammarlyの設定を変更</h3>\n<p>Grammarlyの実行対象ファイルを設定します．</p>\n<p>対象のデフォルトは以下になっています．</p>\n<pre><code class=\"hljs language-bash\">Grammarly › Files: Include\n**/readme.md\n**/README.md\n**/*.txt\n</code></pre>\n<p>LaTexも動作対象にするため、<code>**/*.tex</code>を追加しましょう．</p>\n<pre><code class=\"hljs language-markdown\">Grammarly › Files: Include\n<span class=\"hljs-strong\">**/readme.md\n**</span>/README.md\n<span class=\"hljs-strong\">**/<span class=\"hljs-emphasis\">*.txt\n*</span><span class=\"hljs-emphasis\">*/*</span>.tex\n</span></code></pre>\n<p>これで、texファイルもGrammarlyの動作対象とすることができました．</p>\n<h2>さぁ、執筆だ！</h2>\n<p>まずはOverleafと接続しましょう．やり方は、<a href=\"https://github.com/iamhyc/Overleaf-Workshop\">GitHubの指示</a>の通りでcokieを使ってログインします．</p>\n<p>次に、対象のプロジェクトを任意のディレクトリに反映させます．これも↑と同様に書いてあります！</p>\n<p><img src=\"https://raw.githubusercontent.com/iamhyc/Overleaf-Workshop/master/docs/assets/demo07-local.gif\" alt=\"demo07-local.gif\"></p>\n<p>ここまで問題なく来れれば、あとはローカルでLatex-Workshopに身を任せて執筆していきます．</p>\n<h2>GitHub連携する</h2>\n<p>書ききったらバージョン管理をしていくわけですが、tagとかで管理すればいいんではないかなぁと言う雑な考えで管理してみます．</p>\n<p>ちなみに、修正の余地はありそうですが、一旦以下の<code>.gitignore</code>を適用しました．pdf以外のビルド時のartifactsはコミットしないためです．</p>\n<pre><code class=\"hljs language-c\"><span class=\"hljs-comment\">/**/</span>*.aux\n<span class=\"hljs-comment\">/**/</span>*.bbl\n<span class=\"hljs-comment\">/**/</span>*.blg\n<span class=\"hljs-comment\">/**/</span>*.fdb_latexmk\n<span class=\"hljs-comment\">/**/</span>*.fls\n<span class=\"hljs-comment\">/**/</span>*.<span class=\"hljs-built_in\">log</span>\n<span class=\"hljs-comment\">/**/</span>*.out\n<span class=\"hljs-comment\">/**/</span>*.spl\n<span class=\"hljs-comment\">/**/</span>*.synctex.gz\n</code></pre>\n<p>tagを登録して、バージョン管理してみる．</p>\n<pre><code class=\"hljs language-bash\">$ git add .\n$ git commit -m v0\n$ git tag v0\n$ git push --tags\n</code></pre>\n<h2>課題</h2>\n<p>これでOverleafの執筆内容をローカルに移し、ローカルでの執筆をOverleaf上に反映させることができます．</p>\n<p>しかし、多少課題があり、改善する方法を考えても良いのかなぁと言う点があります．</p>\n<p><strong>ローカル執筆環境で作成したファイルがOverleaf上に反映されるのは良いのですが、削除が反映されません．</strong></p>\n<p>Overleaf上に戻ったときに、いらないものを消さなければ行けなさそうなのがダルそうです．</p>\n<p>あと、<code>hoge.fuga</code>が<code>hoge.fuga.git</code>として反映される場合があり...</p>\n<p>この辺は対処法を探したほうがよさそうです．</p>\n<p>とはいえ、これでローカルで執筆ができますし、作業内容はOverleafに同期されますし、しゅんけーさんの言うようにcopilotを使って執筆が捗ること考えれば旨味がでかいかもしれませんね！</p>","Title":"Overleaf+VSCode+GitHub+etcな執筆環境を整える","Date":"2024-01-03","Category":"論文","Tags":["論文執筆","Overleaf"],"Authors":"ゆうぼう","Slug":"overleaf-writing-on-local","Thumbnail":"/images/thumbnails/overleaf-writing-on-local.png","Description":"Overleaf+VSCode+GitHub+etcな執筆環境を整えるための環境構築ログです．","Published":true},"categories":["論文","Web","JavaScript","Competition","Cloud","Python","Linux","ML","Go","SQL"],"tags":["Apache","Appium","ASR","atmaCup","AWS","brew","CentOS7","CentOS8","Colab","COMET","commonsense","conda","Contrasive Learning","Contrastive Learning","CSS","Demo","Dialogue Structure Learning","dialogue system","DST","Emotion Recognition","empathetic dialogue system","encyclopedic","Error Correction","ESPNet","ffmpeg","Flask","Gating Mechanism","Go","Google Colaboratory","Heroku","Highway Transformer","HTML","humor detection","Intent Classification","Internet-Augmented","JavaScript","JSON","Kaggle","KC-Net","knowledge-base","Knowledge-Intensive NLP","laughter","Linux","LLM","Mac","make","map","MeCab","mental health","mental state knowledge","mentalisation","MentalRoBERTa","Merging Models","ML","Model Editing","Model Patching","MT","Multi-Hop Transformer","multi-modal","MySQL","NLG","NLI","NLP","Node","node.js","npm","Overleaf","Pandas","persona","PLMKE","Poetry","Prompt-Tuning","Python","Pytorch","pytorch-lightning","Scikit-learn","Selenium","Self-Dependency-Units (SDU)","shared laughter","SISR","SLU","Speech Disfluency","subprocess","Super-Resolution","survey","tensorflow","Tkinter","Transfer Learning","transformer","Weight Interpolation","zsh","オブジェクト指向","デコレータ","データ分析","特殊メソッド","聞き手反応","論文執筆","超解像"]},"__N_SSG":true}