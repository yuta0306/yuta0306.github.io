{"pageProps":{"TaggedPostData":[{"contentHtml":"<p>Pythonで始める機械学習でお勉強中にFutureWarningに遭遇しました。GroupKFoldで起こったのですが、とりあえず今は使えるもののこの先使えなくなることが示されているので修正します。</p>\n<h2>FutureWarningを発生させてみる</h2>\n<p>少し前の書籍の型に合わせてコードを書いてみます。<del>FutureWarning</del>が発生するはずです。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">@python</span>\n\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> GroupKFold  <span class=\"hljs-comment\"># グループ交差検証</span>\n<span class=\"hljs-keyword\">from</span> sklearn.datasets <span class=\"hljs-keyword\">import</span> make_blobs  <span class=\"hljs-comment\"># 合成データ生成</span>\n\n<span class=\"hljs-comment\"># 合成データセットを生成</span>\nX, y = make_blobs(n_samples=<span class=\"hljs-number\">10</span>, random_state=<span class=\"hljs-number\">0</span>)\n<span class=\"hljs-comment\"># 最初の2サンプルが同じグループに、次の4つが同じグループに</span>\ngroups = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>]\nscores = cross_val_score(logreg, X, y, groups, cv=GroupKFold(n_splits=<span class=\"hljs-number\">3</span>))\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Cross-validation scores:\\n{}\"</span>.<span class=\"hljs-built_in\">format</span>(scores))</code></pre>\n<p>おそらくこの型が少し前の技術書の仕様だと思います。<em>Pythonで始める機械学習</em>もこの型でした。</p>\n<p>結果をみてみます。</p>\n<pre><code class=\"hljs language-bash\">Cross-validation scores:\n[0.5 1.  1. ]\n/Users/user/opt/anaconda3/envs/ML/lib/python3.6/site-packages/sklearn/utils/validation.py:71: \nFutureWarning: Pass groups=[0, 0, 1, 1, 1, 1, 3, 3, 4, 4] as keyword args. \nFrom version 0.25 passing these as positional arguments will result <span class=\"hljs-keyword\">in</span> an error\nFutureWarning)</code></pre>\n<p>こんな感じのWarningが発生します。</p>\n<p>最後の方を読んでみると、<strong>バージョン0.25からはgroups配列は位置引数としてだとエラーになるよ</strong>みたいな感じのことを言っています。改善方法は至ってシンプルです。<br>\n次に示します。</p>\n<h2>改善策</h2>\n<p>改善策は至ってシンプルです。</p>\n<p>**groups=(グループ配列)**にすればいいのです。直したコードを示します。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">@python</span>\n\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> GroupKFold  <span class=\"hljs-comment\"># グループ交差検証</span>\n<span class=\"hljs-keyword\">from</span> sklearn.datasets <span class=\"hljs-keyword\">import</span> make_blobs  <span class=\"hljs-comment\"># 合成データ生成</span>\n\n<span class=\"hljs-comment\"># 合成データセットを生成</span>\nX, y = make_blobs(n_samples=<span class=\"hljs-number\">10</span>, random_state=<span class=\"hljs-number\">0</span>)\n<span class=\"hljs-comment\"># 最初の2サンプルが同じグループに、次の4つが同じグループに</span>\ngroups = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>]\nscores = cross_val_score(logreg, X, y, groups=groups, cv=GroupKFold(n_splits=<span class=\"hljs-number\">3</span>))\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Cross-validation scores:\\n{}\"</span>.<span class=\"hljs-built_in\">format</span>(scores))</code></pre>\n<p>直したのはこの部分</p>\n<pre><code class=\"hljs language-python\">scores = cross_val_score(logreg, X, y, groups=groups, cv=GroupKFold(n_splits=<span class=\"hljs-number\">3</span>))</code></pre>\n<p>単に<em>groups=groups</em>にするだけです。これだけで直ります。</p>\n<p>やはりFutureWarningが多いですね〜この周りは。</p>\n","Title":"Scikit-learnのGroupKFoldでgroups配列でWarning発生!!","Date":"2020-08-18","Category":"Python","Tags":["Scikit-learn","Python"],"Authors":"ゆうぼう","Slug":"groupfold-groups","Thumbnail":"/images/thumbnails/network.jpg","Description":"Pythonで始める機械学習でお勉強中にFutureWarningに遭遇しました。GroupKFoldで起こったのですが、とりあえず今は使えるもののこの先使えなくなることが示されているので修正します。","Published":true},{"contentHtml":"<p>ロジスティック回帰をscikit-learnで実装していると、デフォルトはL2正則化でペナルティを与えています。</p>\n<p>そこで、もっとスパースにしてやろうとL1正則化を行おうとしたのだが、エラーを吐かれた。その時の解決策を共有します。</p>\n<h2>エラーを吐かれた時のバージョン</h2>\n<p>一応最近開発が立て込んでいるので、Anacondaを使って開発環境を分けているのですが、</p>\n<pre><code class=\"hljs language-bash\">(base)$ conda activate ML\n(ML)$ conda list    (pip listでも行ける)\n......\n......\nscikit-learn           0.23.1    \n......</code></pre>\n<p>ということで、scikit-learnのバージョンは<em>0.23.1</em>でした。</p>\n<h2>実装してみる</h2>\n<p>それでは実装してみます。至ってシンプルなスクリプトで動く想定でやっていきます。こちらで変化させるハイパーパラメータは以下になります。</p>\n<table>\n<thead>\n<tr>\n<th>パラメータ</th>\n<th>値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C(正則化のつよさ)</td>\n<td>1(デフォルト)</td>\n</tr>\n<tr>\n<td>penalty</td>\n<td>L1正則化</td>\n</tr>\n<tr>\n<td>max_iter(イテレーションの上限)</td>\n<td>100000</td>\n</tr>\n</tbody>\n</table>\n<p>また、訓練データ(X_train, y_train)とテストデータ(X_test, y_test)に分けてあることにします。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> sklearn.linear_model <span class=\"hljs-keyword\">import</span> LogisticRegression\n\nlr_l1 = LogisticRegression(penalty=<span class=\"hljs-string\">'l1'</span>, max_iter=<span class=\"hljs-number\">100000</span>).fit(X_train, y_train)</code></pre>\n<p>するとこんなエラーが返ってきます。</p>\n<pre><code class=\"hljs language-bash\">~/opt/anaconda3/envs/ML/lib/python3.6/site-packages/sklearn/linear_model/_logistic.py <span class=\"hljs-keyword\">in</span> fit(self, X, y, sample_weight)\n1302         The SAGA solver supports both float64 and float32 bit arrays.\n1303         <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\n-> 1304         solver = _check_solver(self.solver, self.penalty, self.dual)\n1305 \n1306         if not isinstance(self.C, numbers.Number) or self.C &#x3C; 0:\n\n~/opt/anaconda3/envs/ML/lib/python3.6/site-packages/sklearn/linear_model/_logistic.py in _check_solver(solver, penalty, dual)\n441     if solver not in ['liblinear', 'saga'] and penalty not in ('l2', 'none'):\n442         raise ValueError(\"</span>Solver %s supports only <span class=\"hljs-string\">'l2'</span> or <span class=\"hljs-string\">'none'</span> penalties, <span class=\"hljs-string\">\"\n--> 443                          \"</span>got %s penalty.<span class=\"hljs-string\">\" % (solver, penalty))\n444     if solver != 'liblinear' and dual:\n445         raise ValueError(\"</span>Solver %s supports only <span class=\"hljs-string\">\"\n\nValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got l1 penalty.</span></code></pre>\n<p>ファイルのありかは人それぞれですが、エラーは返ってきます。<br>\nデフォルトの<strong>Solverがlbfgs</strong>に変わっていたそうで、l2またはnoneしかペナルティをサポートしていないそうです。</p>\n<p>というわけで、Solverに<strong>liblinear</strong>を指定しないといけないようですね。</p>\n<h2>liblinearを指定する</h2>\n<p>先ほどのエラーをなくすため、新たにパラメータを足します。</p>\n<table>\n<thead>\n<tr>\n<th>パラメータ</th>\n<th>値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C(正則化のつよさ)</td>\n<td>1(デフォルト)</td>\n</tr>\n<tr>\n<td>penalty</td>\n<td>L1正則化</td>\n</tr>\n<tr>\n<td>max_iter(イテレーションの上限)</td>\n<td>100000</td>\n</tr>\n<tr>\n<td>solver</td>\n<td>liblinear</td>\n</tr>\n</tbody>\n</table>\n<p>では足します。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> sklearn.linear_model <span class=\"hljs-keyword\">import</span> LogisticRegression\n\nlr_l1 = LogisticRegression(penalty=<span class=\"hljs-string\">'l1'</span>, solver=<span class=\"hljs-string\">'liblinear'</span>, max_iter=<span class=\"hljs-number\">100000</span>).fit(X_train, y_train)</code></pre>\n<p>これで無事動くようになりました!!!</p>\n<h2>まとめ</h2>\n<p>まとめです。<br>\nscikit-learnを用いて、ロジスティック回帰を使う時、さらにL1正則化をかけたい時は**solver='liblinear'**を引数に追加しましょう。</p>\n<p>この周りは色々と変化が早いので、本を買う際にも初版等も確認しつつ買った方が良い気がしました。バージョン確認も大切に。</p>\n","Title":"ロジスティック回帰でL1正則化を利用できない問題の解決法","Date":"2020-08-01","Category":"Python","Tags":["ML","Python","Scikit-learn"],"Authors":"ゆうぼう","Slug":"logistic-with-l1","Thumbnail":"/images/thumbnails/network.jpg","Description":"ロジスティック回帰をscikit-learnで実装していると、デフォルトはL2正則化でペナルティを与えています。そこで、もっとスパースにしてやろうとL1正則化を行おうとしたのだが、エラーを吐かれた。その時の解決策を共有します。","Published":true},{"contentHtml":"<p>一応参考書通りに学習するのだが、基本的にはいつも最新版をインストールして使う人間なもので、Warning及びErrorとの戦いはよくあることです。ので、Warningとかが出るとうっと身構えてしまうので、困らないように備忘録かつ反面教師として残しておきます。</p>\n<h2>とりあえずmake_forge()をやってみようか</h2>\n<p>とりあえずmake_forge()でforgeデータを生成し、Warningさせてみますかね。。。</p>\n<p>ライブラリはmglearnを使うのでpip環境がある人は、<strong>pip install mglearn</strong>をしてください。その上で、</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> mglearn    <span class=\"hljs-comment\"># mglearnのインポート</span>\nX, y = mglearn.datasets.make_forge()    <span class=\"hljs-comment\"># make_forgeメソッドで生成</span></code></pre>\n<p>以下がアウトプットです。</p>\n<pre><code class=\"hljs language-bash\">/Users/user/opt/anaconda3/envs/ML/lib/python3.6/site-packages/sklearn/utils/deprecation.py:86: FutureWarning: Function make_blobs is deprecated; Please import make_blobs directly from scikit-learn\nwarnings.warn(msg, category=FutureWarning)</code></pre>\n<p>なんだかWarningで怒られましたorz</p>\n<p>将来的にsklearn.datasets.makeblobs()と被るよってことを言いたいらしいです。<em>scikit-learnから直接make_blobsをインポートしろ</em>とか言ってますね。\n次からWarningを避けて行きます。</p>\n<h2>make_blobsに乗り換える</h2>\n<p>make_blobsメソッドに乗り換えて行きます。これはscikit-learnのdatasetsモジュールに含まれているみたいなので、こいつをインポートして行きます。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> sklearn.datasets <span class=\"hljs-keyword\">import</span> make_blobs    <span class=\"hljs-comment\"># これでインポート完了</span></code></pre>\n<p>インポートがうまくいったら次はメソッドを呼び出します。</p>\n<pre><code class=\"hljs language-python\">X, y = make_blobs()</code></pre>\n<p>これでデータがうまく生成されたようです。無事Warningも出てきません!!!\n念のため、Xの型をみて行きます。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"X.shape: {}\"</span>.<span class=\"hljs-built_in\">format</span>(X.shape))\n\n<span class=\"hljs-comment\"># -> X.shape: (100, 2)</span></code></pre>\n<p>詰まるところ、2つの特徴量を持つデータが100個生成されました。100*2の行列ですね。\nmake_forge()のときは2つの特徴量のデータが26個を期待していたようなので、データ量が増えたみたいですね。</p>\n<h2>まとめ</h2>\n<p>mglearn.datasets.make_forge()でWarningを回避する方法のまとめがこちらです。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> sklearn.datasets <span class=\"hljs-keyword\">import</span> make_blobs    <span class=\"hljs-comment\"># インポート</span>\nX, y = make_blobs()    <span class=\"hljs-comment\"># make_blobsメソッドの実行</span>\n\n<span class=\"hljs-string\">\"\"\"\n確認のおまけ\n\"\"\"</span>\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"X.shape: {}\"</span>.<span class=\"hljs-built_in\">format</span>(X.shape))\n\n<span class=\"hljs-comment\">#-> X.shape: (100, 2)    # 特徴量を2つ持つ100個のデータ</span></code></pre>\n<p>scikit-learn周りは、アップデートが早いので少し古い技術書なだけでも、Future Warningが出たり、Errorが出たりすることが多々あります。\n気をつけながら学習をする必要がありそうですね。では、今回はここまで！</p>\n","Title":"scikit-learnのmake_blobsに乗り換えよう!!","Date":"2020-07-21","Category":"Python","Tags":["ML","Python","Scikit-learn"],"Authors":"ゆうぼう","Slug":"prefer-to-make_blobs","Thumbnail":"/images/thumbnails/python.jpg","Description":"Pythonではじめる機械学習をやっている最中に、mglearnというライブラリからmake_forge()メソッドでデータを生成することがあったのですが、Warningが出て怒られたので、推奨される形に戻すために互換性のあるコードに直します。","Published":true}],"tag":"Scikit-learn","categories":["Web","JavaScript","Competition","Cloud","Linux","Python","ML","Go","SQL"],"tags":["Apache","Appium","atmaCup","AWS","CentOS7","conda","CSS","Flask","Go","HTML","JavaScript","JSON","Mac","make","map","MeCab","ML","MySQL","NLP","node.js","Pandas","Python","Scikit-learn","Selenium","subprocess","tensorflow","Tkinter","zsh","オブジェクト指向","デコレータ","データ分析","特殊メソッド"],"pages":1,"page":1},"__N_SSG":true}