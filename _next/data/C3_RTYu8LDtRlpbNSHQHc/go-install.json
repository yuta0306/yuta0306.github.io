{"pageProps":{"postData":{"contentHtml":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.15.0/dist/katex.min.css\">\n</head>\n<body>\n<p>環境構築がいつも面倒くさくて、実際にローカルで開発を始めるまでに毎回時間がかかるので新しい言語を始める時躊躇われることが多いです。そう思いつつもGoを始めてみたところ、かなり環境構築が楽でした。その時の話を少ししていきます。</p>\n<p>インストールをしていく際は、こちらのサイトを参照されたい。</p>\n<p><a href=\"https://golang.org/doc/install\">https://golang.org/doc/install</a></p>\n<h2>インストーラのダウンロード</h2>\n<p>まずは、上に示していた<a href=\"https://golang.org/doc/install\">https://golang.org/doc/install</a>にアクセスします。</p>\n<p>すると、最上部にダウンロードの手順が示されており以下のようになっています。</p>\n<ol>\n<li>Go donwload.</li>\n<li>Go install.</li>\n<li>Go code.</li>\n</ol>\n<p>最初の手順としてインストーラのダウンロードを行います。</p>\n<p><img src=\"/images/article/go-download.png\" alt=\"Goのdownload\"></p>\n<p>上の画像をのように、画面は開いているPCのOSに合わせて適したインストーラがダウンロードできるようになっています。</p>\n<p>私の場合は、Macから触っているのでMac用ダウンロードになっています。</p>\n<p>こちらをクリックしてダウンロードします。</p>\n<h2>インストールする</h2>\n<p>続いて、インストールをします。先ほどダウンロードしたものがインストーラなのでそれを立ち上げてインストールを開始します。</p>\n<p>インストール画面が出たら、特に何も設定せずに、次へと進んでいって大丈夫です。</p>\n<p><strong>PATH</strong>は勝手に通してくれるみたいです。</p>\n<p>ちなみに、公式にはこのようなことが説明に書いてあります。</p>\n<p>Linux</p>\n<p><img src=\"/images/article/go-install-linux.png\" alt=\"Go install for linux\"></p>\n<p>Mac</p>\n<p><img src=\"/images/article/go-install-mac.png\" alt=\"Go install for mac\"></p>\n<p>Windows</p>\n<p><img src=\"/images/article/go-install-windows.png\" alt=\"Go install for windows\"></p>\n<p>とりあえず、Macでしかインストールを試していないのでMacを前提にこの記事を進めさせていただきますね。</p>\n<p>インストールできたら、ターミナルを開きます。（or 開きなおします）</p>\n<p>そこで、<em>go version</em>とコマンドを打ってみましょう。</p>\n<pre><code class=\"hljs language-bash\">$ go version\n</code></pre>\n<p>結果は以下が得られるはずです(10/5現在)</p>\n<pre><code class=\"hljs language-bash\">$ go version\ngo version go1.15.2 darwin/amd64\n</code></pre>\n<h2>go versionがエラーで表示されない</h2>\n<p>PATHが通っていないことが考えられます。</p>\n<p>そこで解決策を二つ提示します。</p>\n<ol>\n<li>ターミナルを開き直す</li>\n<li>PATHを明示的に通す</li>\n</ol>\n<h2>#ターミナルを開き直す</h2>\n<p>ターミナルを開きなおして、インストールの設定が完了した状態にしましょう。</p>\n<p>これでもダメなら次へ行きます。</p>\n<h2>#PATHを明示的に通す</h2>\n<p>一応デフォルトでPATHが通るはずですが、通らないこともあると思うので、<strong>明示的に</strong>PATHを通してみます。</p>\n<p>ターミナルでPATHを通しましょう。</p>\n<pre><code class=\"hljs language-bash\">$ <span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-variable\">$PATH</span>:/usr/local/go/bin\n</code></pre>\n<p>とりあえず、これでPATHが通ればうまくいくはずです。</p>\n<p>......</p>\n<p>これでもダメならインストールしなおせばうまくいくんじゃないかな...(暴論)</p>\n<h2>まとめ</h2>\n<p>これでGoのインストールが完了したはずです。</p>\n<p>インストール自体に時間が割かれることが多い印象ですが、この言語はインストールも早く、かなり高速で言語をローカルで触る環境が整うといった印象でした。</p>\n<p>書き方もかなり使い易くて、静的型付言語の煩わしさを取っ払ったような感じがしました。(感じがしただけで実際まだよくわからないww)</p>\n<p>ちょっと面白そうな感じだったので、深掘りして学んでみてWeb APIでもあとで作ってみようかなと思います。</p>\n<p>それではGoのインストールはここまでです。</p>\n</body>\n</html>\n","Title":"Goのインストールが楽すぎた話","Date":"2020-10-05","Category":"Go","Tags":"Go","Authors":"ゆうぼう","Slug":"go-install","Thumbnail":"/images/thumbnails/gopher.jpg","Description":"環境構築がいつも面倒くさくて、実際にローカルで開発を始めるまでに毎回時間がかかるので新しい言語を始める時躊躇われることが多いです。そう思いつつもGoを始めてみたところ、かなり環境構築が楽でした。その時の話を少ししていきます。","Published":true},"categories":["論文","Web","JavaScript","Competition","Cloud","Linux","Python","ML","Go","SQL"],"tags":["Apache","Appium","atmaCup","AWS","CentOS7","CentOS8","Colab","COMET,mental health,NLP,mental state knowledge,mentalisation,Contrasive Learning,MentalRoBERTa,KC-Net","conda","CSS","dialogue system","dialogue system,Internet-Augmented","dialogue system,knowledge-base","dialogue system,NLI","dialogue system,persona,Prompt-Tuning","dialogue system,survey,DST","DST","ESPNet","ffmpeg","Flask","Gating Mechanism","Go","Google Colaboratory","Heroku","Highway Transformer","HTML","humor detection","humor detection,multi-modal","JavaScript","JSON","Kaggle","laughter,shared laughter","Linux","Mac","make","map","MeCab","ML","MT,transformer,Multi-Hop Transformer","multi-modal","MySQL","NLP","Node","node.js","npm","Pandas","Poetry","Python","Pytorch","pytorch-lightning","Scikit-learn","Selenium","Self-Dependency-Units (SDU)","SISR","subprocess","Super-Resolution","survey","survey,dialogue system","survey,NLP,knowledge-base,PLMKE,commonsense,encyclopedic,Knowledge-Intensive NLP","tensorflow","Tkinter","transformer","transformer,Highway Transformer,Gating Mechanism,Self-Dependency-Units (SDU)","zsh","オブジェクト指向","デコレータ","データ分析","特殊メソッド","超解像"]},"__N_SSG":true}