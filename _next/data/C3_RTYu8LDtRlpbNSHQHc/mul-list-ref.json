{"pageProps":{"postData":{"contentHtml":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.15.0/dist/katex.min.css\">\n</head>\n<body>\n<p>今回は、<strong>多次元配列で*演算には注意しないと、バグが起こるよ</strong>ってことを話します。1年Pythonを描き続けましたが知らなかったので、これは共有させていただきますね。Pythonは、ポインタだの参照だのを意識しなくても良い言語だと思うんですが、これは知っておくべきです。</p>\n<h2>実験方法</h2>\n<p>各配列がどの参照をしているかを注目してみましょう。今回の実験は、以下の流れをとります。</p>\n<ol>\n<li>2次元配列を定義 &#x3C;- 様々な方法をとります</li>\n<li>中の配列の0番目append(0)をする</li>\n<li>実験結果の確認</li>\n</ol>\n<p>それでは早速実験です。対話モードにて行います。</p>\n<h2>シンプルに定義</h2>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">>>> </span>l = [[], [], []]\n<span class=\"hljs-meta\">>>> </span>l[<span class=\"hljs-number\">0</span>].append(<span class=\"hljs-number\">0</span>)\n\n<span class=\"hljs-meta\">>>> </span>l\n\n[[<span class=\"hljs-number\">0</span>], [], []]\n</code></pre>\n<p>これはおそらく考えていた通りですね。問題なし。</p>\n<h2>+演算で定義</h2>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">>>> </span>l = [[]] + [[]] + [[]]\n<span class=\"hljs-meta\">>>> </span>l[<span class=\"hljs-number\">0</span>].append(<span class=\"hljs-number\">0</span>)\n\n<span class=\"hljs-meta\">>>> </span>l\n\n[[<span class=\"hljs-number\">0</span>], [], []]\n</code></pre>\n<p>これも想定した通り。問題なし。</p>\n<h2>*演算で定義</h2>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">>>> </span>l = [[]] * <span class=\"hljs-number\">3</span>\n<span class=\"hljs-meta\">>>> </span>l[<span class=\"hljs-number\">0</span>].append(<span class=\"hljs-number\">0</span>)\n\n<span class=\"hljs-meta\">>>> </span>l\n\n[[<span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>]]\n</code></pre>\n<p>......ん？？？？</p>\n<p>全ての要素配列に0が足してありますね...これは知らんかったやつ...</p>\n<h2>*演算に注意!!!</h2>\n<p>*演算で配列を定義する際には注意しましょう。</p>\n<p>シンプルに定義した場合や+によって定義した配列は、それぞれの配列は別のものとして定義されています。</p>\n<p>しかし、*によって定義されたものは、演算対象となった配列の参照そのものさえもコピーされて作られてしまいます。</p>\n<p>まとまった挙動を示して欲しいのであれば問題ないですが、大きなくくりの配列にある要素配列に対しては別々に動いて欲しい場合はかなり注意が必要です。</p>\n<p>このことを知っておくだけでもバグが出た時に冷静に対処できると思うので、ぜひ覚えておきましょう。</p>\n</body>\n</html>\n","Title":"【Python】多次元の不用意な*演算には注意!!","Date":"2020-11-27","Category":"Python","Tags":"Python","Authors":"ゆうぼう","Slug":"mul-list-ref","Thumbnail":"/images/thumbnails/python.jpg","Description":"今回は、多次元配列で\\*演算には注意しないと、バグが起こるよってことを話します。1年Pythonを描き続けましたが知らなかったので、これは共有させていただきますね。Pythonは、ポインタだの参照だのを意識しなくても良い言語だと思うんですが、これは知っておくべきです。","Published":true},"categories":["論文","Web","JavaScript","Competition","Cloud","Linux","Python","ML","Go","SQL"],"tags":["Apache","Appium","atmaCup","AWS","CentOS7","CentOS8","Colab","COMET,mental health,NLP,mental state knowledge,mentalisation,Contrasive Learning,MentalRoBERTa,KC-Net","conda","CSS","dialogue system","dialogue system,Internet-Augmented","dialogue system,knowledge-base","dialogue system,NLI","dialogue system,persona,Prompt-Tuning","dialogue system,survey,DST","DST","ESPNet","ffmpeg","Flask","Gating Mechanism","Go","Google Colaboratory","Heroku","Highway Transformer","HTML","humor detection","humor detection,multi-modal","JavaScript","JSON","Kaggle","laughter,shared laughter","Linux","Mac","make","map","MeCab","ML","MT,transformer,Multi-Hop Transformer","multi-modal","MySQL","NLP","Node","node.js","npm","Pandas","Poetry","Python","Pytorch","pytorch-lightning","Scikit-learn","Selenium","Self-Dependency-Units (SDU)","SISR","subprocess","Super-Resolution","survey","survey,dialogue system","survey,NLP,knowledge-base,PLMKE,commonsense,encyclopedic,Knowledge-Intensive NLP","tensorflow","Tkinter","transformer","transformer,Highway Transformer,Gating Mechanism,Self-Dependency-Units (SDU)","zsh","オブジェクト指向","デコレータ","データ分析","特殊メソッド","超解像"]},"__N_SSG":true}