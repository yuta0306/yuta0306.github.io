{"pageProps":{"CategoricalPostData":[{"contentHtml":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.15.0/dist/katex.min.css\">\n</head>\n<body>\n<p>AWSのオンラインセミナーに参加したのでその時のメモ(11/10)</p>\n<h2>リージョン</h2>\n<ul>\n<li>AZ; アベイラビリティゾーン(データセンター群)\n最大6個のデータセンターの集まり\n<ul>\n<li>データセンターがクラッシュした時の対策; 耐障害性</li>\n<li>1ms以下の接続遅延時間</li>\n</ul>\n</li>\n</ul>\n<h2>基本サービス4つ</h2>\n<ol>\n<li>Amazon VPC\n<ul>\n<li>AZ内にサブネットを作る -> インターネットゲートウェイから外部から接続できる</li>\n</ul>\n</li>\n<li>Amazon EC2\n<ul>\n<li>Linux or Windowsを時間単位で起動</li>\n<li>インスタンスは永続的なストレージを持っていない. EBSというストレージをアタッチして保存.</li>\n<li>バックアップをスナップショット(S3に保存）</li>\n</ul>\n</li>\n<li>Amazon RDS\n<ul>\n<li>6つのデータベースサーバ</li>\n<li>時間課金</li>\n<li>バックアップが取得される</li>\n<li>リードレプリカ同期が完全自動化</li>\n</ul>\n</li>\n<li>Amazon S3\n<ul>\n<li>オブジェクトストレージ</li>\n<li>静的</li>\n<li>APIをたたいて利用</li>\n<li><em>ユニークなキー(固有のURI)でファイルを取得することができる</em> -> 安価に安定した形態になる</li>\n<li>S3の方が安くデータを保存できる. 静的コンテンツがたくさんあればある程、S3の方が安く運用できる.</li>\n</ul>\n</li>\n</ol>\n<h2>スケーラビリティの確保</h2>\n<ul>\n<li>オートスケーリング(上限、下限を超えたCPUが出たら、インスタンスをふやすもしくは減らすことが自動でなされる)</li>\n</ul>\n<h2>価値を生みづらい重労働(Amazon RDS)</h2>\n<ul>\n<li>冗長構成</li>\n<li>バックアップ</li>\n<li>パッチ適応</li>\n<li>PITR(Point In Time Recovery)</li>\n</ul>\n<p>利用者はほとんど時間がかかる. インストールする作業(待ち時間)は無駄な作業. 故にあらかじめインストールされた環境(RDS)</p>\n<h2>メカニズム</h2>\n<p>メカニズムを重視\n自動化を実現させる一連のプロセス\nインプットを連続的にアウトプットへ変換</p>\n<h2>Infrastructure as Code(IaC)</h2>\n<ul>\n<li>リソースはAPI経由でプロビジョニング</li>\n<li>定義ファイルによる、効率化と自動化</li>\n<li>エラーやセキュリティ違反の除去</li>\n</ul>\n<h2>Cloud Computing</h2>\n<p>IaCの基に成り立つ</p>\n<p>AWSで175を超えるサービス</p>\n<h2>#マネージドサービスを使うのを嫌がる場合</h2>\n<p>-AWSの利用をやめる際、OSを使わないとAWSに依存したサービスになるため<strong>バックアップや移行が難しくなる</strong>.</p>\n<h2>マイクロサービスアーキテクチャ(SOA)</h2>\n<p>ステークホルダーにコミットしたAPIの利用には最新の注意を(APIに影響を与えるバージョンアップはウォーターフォールを)</p>\n<ul>\n<li>単一の目的</li>\n<li>HTTPSのAPIでのみ連携\n<ul>\n<li>必要に応じてAPI叩く</li>\n</ul>\n</li>\n<li>お互いはブラックボックス</li>\n</ul>\n<h2>マイクロサービスデプロイモデル</h2>\n<p>各サービスごとに少数の開発者と〜〜がある</p>\n<h2>Blue / Green Deployment</h2>\n<ol>\n<li>App-v1を残して、App-v2を作る(ユーザはv1へアクセス)</li>\n<li>問題なさそうならv1のバックアップを潰して、v2へバージョンアップ</li>\n<li>ユーザのアクセスはv2へ</li>\n</ol>\n<h2>AWS Lambda</h2>\n<p>サーバレスコンピューティング</p>\n<ul>\n<li>コンテナ(ISOで定義される共通規格)\n<ul>\n<li>メリット; コードと依存環境をまとめてパッケージ化\t, アプリケーション層の抽象化</li>\n<li>Docker Engine</li>\n<li>圧倒的高速; ns単位で動作</li>\n</ul>\n</li>\n<li>水平スケーリングと垂直スケーリング\n<ul>\n<li>垂直: 繁忙期にはインスタンスを増やして大きくするなど.</li>\n<li>水平: 横に広げるイメージ.</li>\n</ul>\n</li>\n<li>完全ステートレス\n<ul>\n<li>処理が終わったら全て破棄される</li>\n<li>NoSQL型を最初に検討すべき?</li>\n</ul>\n</li>\n<li>関数単位での権限制御</li>\n<li>関数単位のロギング</li>\n<li>実行は最大900秒</li>\n<li>使う言語の検討: ms単位の動作を期待する場合はスクリプト言語を検討すべき</li>\n<li>ビルド系言語は初動が遅いが、動き始めれば速い</li>\n</ul>\n<h2>AWSのマネージドコンテナサービス</h2>\n<ul>\n<li>Amazon ECS</li>\n<li>Amazon EKS</li>\n<li>AWS Fargate for ECS</li>\n<li>AWS Fargate for EKS</li>\n</ul>\n<h2>Amazon SQS</h2>\n<ul>\n<li>非同期処理</li>\n<li>FrontendとBackendを非同期かつ疎結合に</li>\n<li>BackendもQueueの滞留に合わせてオートスケールする</li>\n<li>Amazon.comのカートの部分がこの仕組み</li>\n<li>メッセージキューイングサービス</li>\n</ul>\n</body>\n</html>\n","Title":"AWSオンラインセミナーメモ【11/10】","Date":"2020-11-10","Category":"Cloud","Tags":"AWS","Authors":"ゆうぼう","Slug":"aws-memo-11-10","Description":"AWSのオンラインセミナーに参加したのでその時のメモ","Published":true}],"category":"Cloud","categories":["論文","Web","JavaScript","Competition","Cloud","Linux","Python","ML","Go","SQL"],"tags":["Apache","Appium","atmaCup","AWS","CentOS7","CentOS8","Colab","COMET,mental health,NLP,mental state knowledge,mentalisation,Contrasive Learning,MentalRoBERTa,KC-Net","conda","CSS","dialogue system","dialogue system,Internet-Augmented","dialogue system,knowledge-base","dialogue system,NLI","dialogue system,persona,Prompt-Tuning","dialogue system,survey,DST","DST","ESPNet","ffmpeg","Flask","Gating Mechanism","Go","Google Colaboratory","Heroku","Highway Transformer","HTML","humor detection","humor detection,multi-modal","JavaScript","JSON","Kaggle","laughter,shared laughter","Linux","Mac","make","map","MeCab","ML","MT,transformer,Multi-Hop Transformer","multi-modal","MySQL","NLP","Node","node.js","npm","Pandas","Poetry","Python","Pytorch","pytorch-lightning","Scikit-learn","Selenium","Self-Dependency-Units (SDU)","SISR","subprocess","Super-Resolution","survey","survey,dialogue system","survey,NLP,knowledge-base,PLMKE,commonsense,encyclopedic,Knowledge-Intensive NLP","tensorflow","Tkinter","transformer","transformer,Highway Transformer,Gating Mechanism,Self-Dependency-Units (SDU)","zsh","オブジェクト指向","デコレータ","データ分析","特殊メソッド","超解像"],"page":1},"__N_SSG":true}