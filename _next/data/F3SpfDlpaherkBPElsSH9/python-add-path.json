{"pageProps":{"postData":{"contentHtml":"<p>他のディレクトリで作ったモジュールの<em>import</em>をさせたかったのですが、その方法がイマイチわからなくて詰まりました。</p>\n<p>下の階層にあるなら\"<em>.</em>\"でつなげばいいのですが、階層を遡る必要があると困ったので解決策を提示します。</p>\n<p>今回は下層にあるとして進めます。階層が深くなると.(ドット)による記述が無駄に長くなるので、ある程度この記述で冗長な記述も避けられるかな？？と思ったからです。</p>\n<h2>やりたかったこと</h2>\n<p>他のディレクトリ内のモジュールを引っ張ってくる。</p>\n<p>階層構造は以下のようにしてみる</p>\n<pre><code class=\"hljs language-bash\">--- target\n    |      |\n    |      |--- sample.py\n    |\n    |--- main.py  &#x3C;-- 今ここ\n</code></pre>\n<p>で、直感的にやりたかったのがこれ</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">@ main.py</span>\n<span class=\"hljs-keyword\">from</span> target.sample <span class=\"hljs-keyword\">import</span> Sample\n</code></pre>\n<p>これはできるんだけど、もし<br>\n<em>from target.target1.target2.sample import Sample</em><br>\nとかだったらすごく萎えるよね...</p>\n<h2>【 解決策 】Pathにセットしてあげる</h2>\n<p><strong>sysとosを使って解決します!!</strong></p>\n<p>先ほどの階層構造に則ると、参照して欲しいディレクトリはtargetですね。</p>\n<p>先に手順を話すと以下になります。</p>\n<ol>\n<li>sysとosのimport</li>\n<li>os.getcwd()でカレントディレクトリを取得(今回は同じ階層のディレクトリにつながっているため)</li>\n<li>sys.path.append()でPathを追加</li>\n</ol>\n<p>この手順にのっとって書いてみます</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># 手順1</span>\n<span class=\"hljs-keyword\">import</span> sys\n<span class=\"hljs-keyword\">import</span> os\n\n<span class=\"hljs-comment\"># 手順2 &#x26; 3</span>\nsys.path.append(os.getcwd() + <span class=\"hljs-string\">'target'</span>)\n<span class=\"hljs-keyword\">from</span> sample <span class=\"hljs-keyword\">import</span> Sample\n</code></pre>\n<p>一応これで対応できました。</p>\n<p>もし仮に4層、5層...と続いてもpathをセットしておけば、探してくれるので大丈夫です。</p>\n<p>階層を遡るときは、その都度pathにいれるパスを変えてみてください!!</p>","Title":"自作のモジュールを他のディレクトリから持ってきたい!!","Date":"2020-09-03","Category":"Python","Tags":"Python","Authors":"ゆうぼう","Slug":"python-add-path","Thumbnail":"/images/thumbnails/python.jpg","Description":"機械学習の学習中に、他のディレクトリで作った自作関数が使いたかったのだけど、うまくimportする方法に悩みました。pythonがモジュールを探すpathをセットしてあげるだけで済んだので、その方法を解説します。","Published":true},"categories":["論文","Web","JavaScript","Competition","Cloud","Linux","Python","ML","Go","SQL"],"tags":["Apache","Appium","atmaCup","AWS","CentOS7","CentOS8","Colab","COMET","commonsense","conda","Contrasive Learning","Contrastive Learning","CSS","Dialogue Structure Learning","dialogue system","DST","empathetic dialogue system","encyclopedic","ESPNet","ffmpeg","Flask","Gating Mechanism","Go","Google Colaboratory","Heroku","Highway Transformer","HTML","humor detection","Internet-Augmented","JavaScript","JSON","Kaggle","KC-Net","knowledge-base","Knowledge-Intensive NLP","laughter","Linux","Mac","make","map","MeCab","mental health","mental state knowledge","mentalisation","MentalRoBERTa","Merging Models","ML","Model Editing","Model Patching","MT","Multi-Hop Transformer","multi-modal","MySQL","NLG","NLI","NLP","Node","node.js","npm","Pandas","persona","PLMKE","Poetry","Prompt-Tuning","Python","Pytorch","pytorch-lightning","Scikit-learn","Selenium","Self-Dependency-Units (SDU)","shared laughter","SISR","Speech Disfluency","subprocess","Super-Resolution","survey","tensorflow","Tkinter","Transfer Learning","transformer","Weight Interpolation","zsh","オブジェクト指向","デコレータ","データ分析","特殊メソッド","聞き手反応","超解像"]},"__N_SSG":true}