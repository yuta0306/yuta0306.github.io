{"pageProps":{"CategoricalPostData":[{"contentHtml":"<p>画面をプリントしたいときとかって、無駄な情報があってそれを排除してプリントしたり保存したりしたい時ってあるんですよね。そこの広告いらないから...みたいな。JavaScriptから簡単に操作して画面をPDF保存とかできたのでその共有をします。</p>\n<h2>window.print() これだけでよかった</h2>\n<p>Webで開いている画面を印刷もしくはPDF文書として保存するときは、とても簡単。</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">window</span>.print()</code></pre>\n<p>この関数を使うだけで簡単に実行できました。</p>\n<p>とは言っても、この関数を使ってできることは今ある全てのDOM構造を反映してしまうことですかね。いらん情報消したいなぁぁ......。</p>\n<h2>いらないタグ一旦消してしまえ!!(終わったら勿論戻す)</h2>\n<p>さあ、そういうわけでいらない情報を消してしまお〜〜〜〜(暴論)</p>\n<p>ただし、*window.print()*したあとは戻してあげます。</p>\n<p>サンプルコードが以下です。</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> printer = <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">let</span> body = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'body'</span>)[<span class=\"hljs-number\">0</span>]\n    <span class=\"hljs-keyword\">let</span> content = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\"#target\"</span>)\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> child <span class=\"hljs-keyword\">of</span> body.children) {\n        child.style.visibility = <span class=\"hljs-string\">'hidden'</span>\n    }\n    content.style.visibility = <span class=\"hljs-string\">'visible'</span>\n    <span class=\"hljs-built_in\">window</span>.print()\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> child <span class=\"hljs-keyword\">of</span> body.children) {\n        child.style.visibility = <span class=\"hljs-string\">'visible'</span>\n    }\n}</code></pre>\n<p>これで欲しい部分だけ、基本的には印刷対象にできます。(例外はあると思う)</p>\n<p>フローはこんな感じ</p>\n<ol>\n<li>bodyと自分の欲しい所だけ押さえる</li>\n<li>bodyタグの下にあるやつを全部<em>visibility: hidden</em>に</li>\n<li>欲しかったやつだけ<em>visibility: visible</em>に</li>\n<li>**window.print()**で印刷</li>\n<li>全部<em>visibility: visible</em>に戻してあげる</li>\n</ol>\n<p>他にも良い方法があるかもしれませんけど、今回はこれで。</p>\n","Title":"JSで欲しい所だけを印刷するのすごく簡単だったってお話","Date":"2020-11-15","Category":"JavaScript","Tags":"JavaScript","Authors":"ゆうぼう","Slug":"js-print","Thumbnail":"/images/thumbnails/js.png","Description":"画面をプリントしたいときとかって、無駄な情報があってそれを排除してプリントしたり保存したりしたい時ってあるんですよね。そこの広告いらないから...みたいな。JavaScriptから簡単に操作して画面をPDF保存とかできたのでその共有をします。","Published":true},{"contentHtml":"<p>一次元配列のソートは簡単だし、困るのは多次元配列です。しかも、よく記事になっているのは多次元配列の要素中の配列の数字に対してソートをよくやるんですよね〜。文字列でソートはどーやるん？と思って解決した方法を共有します。(数値と全く方法は変わらないんですけどねww)</p>\n<h2>やりたいこと</h2>\n<p>まずはやりたいことを整理します。</p>\n<p>ソート対象リストを下のように定めます。</p>\n<pre><code class=\"hljs language-js\">arr = [\n    [<span class=\"hljs-string\">'戦士'</span>, <span class=\"hljs-number\">200</span>],\n    [<span class=\"hljs-string\">'魔法使い'</span>, <span class=\"hljs-number\">50</span>],\n    [<span class=\"hljs-string\">'勇者'</span>, <span class=\"hljs-number\">500</span>],\n    [<span class=\"hljs-string\">'戦士'</span>, <span class=\"hljs-number\">220</span>],\n    [<span class=\"hljs-string\">'商人'</span>, <span class=\"hljs-number\">120</span>],\n    [<span class=\"hljs-string\">'魔法使い'</span>, <span class=\"hljs-number\">70</span>]\n]</code></pre>\n<p>期待する出力は以下になります。</p>\n<pre><code class=\"hljs language-js\">[\n  [ <span class=\"hljs-string\">'魔法使い'</span>, <span class=\"hljs-number\">50</span> ],\n  [ <span class=\"hljs-string\">'魔法使い'</span>, <span class=\"hljs-number\">70</span> ],\n  [ <span class=\"hljs-string\">'戦士'</span>, <span class=\"hljs-number\">200</span> ],\n  [ <span class=\"hljs-string\">'戦士'</span>, <span class=\"hljs-number\">220</span> ],\n  [ <span class=\"hljs-string\">'商人'</span>, <span class=\"hljs-number\">120</span> ],\n  [ <span class=\"hljs-string\">'勇者'</span>, <span class=\"hljs-number\">500</span> ]\n]</code></pre>\n<p>もしくは逆でも良いですが。</p>\n<h2>sortメソッドで独自Expressionを与えよう</h2>\n<p>それでは、*Array.prototype.sort()*メソッドを用いて、独自のExpressionを書くことでソートをしていきましょう。</p>\n<p>メソッドの詳しい使い方はこちらを参照されたい。(多次元配列は詳しく書いていないので注意)<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\">MDNリファレンス</a>{:target=\"_blank\"}</p>\n<p>arrの要素のインデックス0番目を元にソートするコードはこちらです。</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> arr = [\n    [<span class=\"hljs-string\">'戦士'</span>, <span class=\"hljs-number\">200</span>],\n    [<span class=\"hljs-string\">'魔法使い'</span>, <span class=\"hljs-number\">50</span>],\n    [<span class=\"hljs-string\">'勇者'</span>, <span class=\"hljs-number\">500</span>],\n    [<span class=\"hljs-string\">'戦士'</span>, <span class=\"hljs-number\">220</span>],\n    [<span class=\"hljs-string\">'商人'</span>, <span class=\"hljs-number\">120</span>],\n    [<span class=\"hljs-string\">'魔法使い'</span>, <span class=\"hljs-number\">70</span>]\n];\n\narr.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =></span> {\n    <span class=\"hljs-keyword\">if</span> (a[<span class=\"hljs-number\">0</span>] > b[<span class=\"hljs-number\">0</span>]) <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (a[<span class=\"hljs-number\">0</span>] &#x3C; b[<span class=\"hljs-number\">0</span>]) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">0</span>;\n});\n\n<span class=\"hljs-built_in\">console</span>.log(arr)</code></pre>\n<p>これによって、先のセクションでお話しした通りの結果が返ってきます。</p>\n<p>うまくいった!!成功!!!!</p>\n<p>数値でやろうが手法は一切変わりません。実は。</p>\n<p>Array.prototype.sort()がどう動いていて、ソートをしているのか少し裏側が気になりますね。</p>\n<p>ちょっと興味あったら連絡をください。自分も興味あるので、少し調査して記事にするかもしれません。需要があれば記事にするのでTwitterより連絡ください。</p>\n","Title":"【JS】多次元配列を文字列に合わせてソートしたい!","Date":"2020-10-10","Category":"JavaScript","Tags":"JavaScript","Authors":"ゆうぼう","Slug":"sort-mularr-by-str","Thumbnail":"/images/thumbnails/js.png","Description":"一次元配列のソートは簡単だし、困るのは多次元配列です。しかも、よく記事になっているのは多次元配列の要素中の配列の数字に対してソートをよくやるんですよね〜。文字列でソートはどーやるん？と思って解決した方法を共有します。","Published":true},{"contentHtml":"<p>PythonとかGoとかだとそのまま返り値を複数セットしてもしっかり戻るのですが(Pythonの場合はタプルで返る)、JavaScriptだと*return a, b;*のようなシンプルな書き方だと動作しません。少し特殊な書き方になるのですが、解決策を共有します。</p>\n<p>(端的に言えば、オブジェクトもしくは配列を返すということですが...)</p>\n<h2>【解決策】return {}</h2>\n<p>ここでは、簡単に与えた二つの変数に格納した値を交換するswapを行ってみましょう。</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> swap = <span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =></span> {\n    <span class=\"hljs-keyword\">let</span> tmp = a;\n    a = b;\n    b = tmp;\n\n    <span class=\"hljs-keyword\">return</span> {a, b};\n}\n\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>, b = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-keyword\">var</span> {a, b} = swap(a, b)\n<span class=\"hljs-built_in\">console</span>.log({a, b});</code></pre>\n<p>この出力は<em>a: 2, b: 1</em>になります。(コードすごくくどくて無駄な処理しかないですが、ここでは言及しないでくださいww)</p>\n<p>ただし、この方法には注意点があります。</p>\n<p>次のセクションでお話しします。</p>\n<h2>【注意点】戻す変数名との対応</h2>\n<p>このコードで注意したいことは、戻す変数名との対応関係です。次のようにコードを書き換えてみましょう。</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> swap = <span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =></span> {\n    <span class=\"hljs-keyword\">let</span> tmp = a;\n    a = b;\n    b = tmp;\n\n    <span class=\"hljs-keyword\">return</span> {a, b};\n}\n\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>, b = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-keyword\">var</span> {b, a} = swap(a, b)  <span class=\"hljs-comment\">// ここを変更</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`b: <span class=\"hljs-subst\">${b}</span>, a: <span class=\"hljs-subst\">${a}</span>`</span>);  <span class=\"hljs-comment\">// ここを変更</span></code></pre>\n<p>ここで期待したい結果は<em>b: 2, a: 1</em>です。\nしかし、結果は以下のようになります。</p>\n<pre><code class=\"hljs language-bash\">b: 1, a: 2</code></pre>\n<p>つまり、<strong>returnする変数名と戻す変数名は対応関係になっている</strong>という事になります。</p>\n<p>複数の返り値を設定できればかなりコードが裕福になると思います。Cとかだと複数あればポインタで処理しなければいけないので...</p>\n<p>これでJSで複数の返り値を設定することができました。是非活用してみてください。<del>(詳しく調べてないけどこれはESの仕様...!?)</del></p>\n<p>追記: {a, b}は{a: a, b: b}と同地であり、これは<strong>オブジェクトの省略</strong>による記法みたいです。オブジェクトに限らずリストで返すこともできるみたい(できた)。</p>\n<p>詳しくはこちらを参照されたい<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment</a></p>\n<p>*{}*で囲むことを忘れずに。</p>\n","Title":"JSで返り値にパラメータを複数設定する","Date":"2020-10-10","Category":"JavaScript","Tags":"JavaScript","Authors":"ゆうぼう","Slug":"js-return-mul","Thumbnail":"/images/thumbnails/js.png","Description":"PythonとかGoとかだとそのまま返り値を複数セットしてもしっかり戻るのですが(Pythonの場合はタプルで返る)、JavaScriptだとreturn a, b;のようなシンプルな書き方だと動作しません。少し特殊な書き方になるのですが、解決策を共有します。","Published":true},{"contentHtml":"<p>iOSアプリの自動化できないかなとふと思いました。いつもSelenium等を使って自動化をしているのでAppiumを使ってモバイルも自動化できないかと考えたわけです。そこでインストールの仕方を共有しようと思います。</p>\n<p>今回僕はCLIでインストールをした。node.jsのインストールはすでにできていることを前提にお話をしていきます。</p>\n<h2>念のためnpmのアップデートをしておく</h2>\n<p>「npmの最新バージョンが出たので、アップデートできるよ。」とAppiumをインストールした直後に言われたので、先にやっておけば問題ないと思います。</p>\n<p>ちなみに出たメッセージはこれです。</p>\n<pre><code>│      New patch version of npm available! 6.14.5 → 6.14.7       │\n│   Changelog: https://github.com/npm/cli/releases/tag/v6.14.7   │\n│               Run npm install -g npm to update!                │\n</code></pre>\n<p>念のため最新版にする。</p>\n<pre><code>npm install -g npm\n</code></pre>\n<p>問題が起こるのも嫌なのでアップデートしておきましたが、そこは好みでいいと思います。<br>\n最新版でなくても一応インストールできていましたので。</p>\n<h2>appiumをインストールする</h2>\n<p><strong>Appium</strong>をnpm経由でインストールしていきます。</p>\n<pre><code class=\"hljs language-bash\">$ npm install -g appium    &#x3C;- これを打つ\n\n/usr/<span class=\"hljs-built_in\">local</span>/bin/authorize-ios -> /usr/<span class=\"hljs-built_in\">local</span>/lib/node_modules/appium/node_modules/.bin/authorize-ios\n/usr/<span class=\"hljs-built_in\">local</span>/bin/appium -> /usr/<span class=\"hljs-built_in\">local</span>/lib/node_modules/appium/build/lib/main.js\n+ appium@1.18.0\nupdated 1 package <span class=\"hljs-keyword\">in</span> 2.89s</code></pre>\n<p>これでエラーが出なければOKです。Appiumのインストールは完了。</p>\n<h2>appium-doctorをインストールする</h2>\n<p><strong>Appium-doctor</strong>をnpm経由でインストールしていきます。</p>\n<p>これは、Appiumを使っていく際にインストールの不備がないか診断して、予め不備を発見できるツールです。早速インストールしていきましょう。</p>\n<pre><code class=\"hljs language-bash\">$ npm install -g appium-doctor    &#x3C;- これを打つ\n\n/usr/<span class=\"hljs-built_in\">local</span>/bin/appium-doctor -> /usr/<span class=\"hljs-built_in\">local</span>/lib/node_modules/appium-doctor/appium-doctor.js\n\n> core-js@3.6.5 postinstall /usr/<span class=\"hljs-built_in\">local</span>/lib/node_modules/appium-doctor/node_modules/core-js\n> node -e <span class=\"hljs-string\">\"try{require('./postinstall')}catch(e){}\"</span>\n\n+ appium-doctor@1.15.3\nadded 269 packages from 252 contributors <span class=\"hljs-keyword\">in</span> 13.394s</code></pre>\n<p>こんな感じにインストールがされていくと思います。</p>\n<p>これで最低限使うインストールは完了です。後ほど、appium-doctorのオプションなどについてもお話しして行こうかと思います。</p>\n<p>今回はインストールまでとします。それでは!!!</p>\n","Title":"Appiumをインストールする!!","Date":"2020-07-29","Category":"JavaScript","Tags":["Appium","node.js"],"Authors":"ゆうぼう","Slug":"appium-install","Thumbnail":"/images/thumbnails/js.png","Description":"iOSアプリの自動化できないかなとふと思った。いつもSelenium等を使って自動化をしているのでAppiumを使ってモバイルも自動化できないかと考えたわけ。そこでインストールの仕方を共有しようと思う。","Published":true}],"category":"JavaScript","categories":["Web","JavaScript","Competition","Cloud","Linux","Python","ML","Go","SQL"],"tags":["Apache","Appium","atmaCup","AWS","CentOS7","CentOS8","conda","CSS","ffmpeg","Flask","Go","HTML","JavaScript","JSON","Linux","Mac","make","map","MeCab","ML","MySQL","NLP","node.js","Pandas","Python","Scikit-learn","Selenium","subprocess","tensorflow","Tkinter","zsh","オブジェクト指向","デコレータ","データ分析","特殊メソッド"],"page":1},"__N_SSG":true}